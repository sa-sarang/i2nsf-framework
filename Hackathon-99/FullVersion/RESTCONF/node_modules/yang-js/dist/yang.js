require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
 Based on ndef.parser, by Raphael Graf(r@undefined.ch)
 http://www.undefined.ch/mparser/index.html

 Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)

 You are free to use and modify this code in anyway you find useful. Please leave this comment in the code
 to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,
 but don't feel like you have to let me know or ask permission.
*/

//  Added by stlsmiths 6/13/2011
//  re-define Array.indexOf, because IE doesn't know it ...
//
//  from http://stellapower.net/content/javascript-support-and-arrayindexof-ie
	if (!Array.indexOf) {
		Array.prototype.indexOf = function (obj, start) {
			for (var i = (start || 0); i < this.length; i++) {
				if (this[i] === obj) {
					return i;
				}
			}
			return -1;
		}
	}

var Parser = (function (scope) {
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}

	var TNUMBER = 0;
	var TOP1 = 1;
	var TOP2 = 2;
	var TVAR = 3;
	var TFUNCALL = 4;

	function Token(type_, index_, prio_, number_) {
		this.type_ = type_;
		this.index_ = index_ || 0;
		this.prio_ = prio_ || 0;
		this.number_ = (number_ !== undefined && number_ !== null) ? number_ : 0;
		this.toString = function () {
			switch (this.type_) {
			case TNUMBER:
				return this.number_;
			case TOP1:
			case TOP2:
			case TVAR:
				return this.index_;
			case TFUNCALL:
				return "CALL";
			default:
				return "Invalid Token";
			}
		};
	}

	function Expression(tokens, ops1, ops2, functions) {
		this.tokens = tokens;
		this.ops1 = ops1;
		this.ops2 = ops2;
		this.functions = functions;
	}

	// Based on http://www.json.org/json2.js
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\'\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            "'" : "\\'",
            '\\': '\\\\'
        };

	function escapeValue(v) {
		if (typeof v === "string") {
			escapable.lastIndex = 0;
	        return escapable.test(v) ?
	            "'" + v.replace(escapable, function (a) {
	                var c = meta[a];
	                return typeof c === 'string' ? c :
	                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	            }) + "'" :
	            "'" + v + "'";
		}
		return v;
	}

	function hasValue(values, index) {
		var parts = index.split(/\./);
		var value = values;
		var part;
		while (part = parts.shift()) {
			if (!(part in value)) {
				return false;
			}
			value = value[part];
		}
		return true;
	}

	function getValue(values, index) {
		var parts = index.split(/\./);
		var value = values;
		var part;
		while (part = parts.shift()) {
			value = value[part];
		}
		return value;
	}

	Expression.prototype = {
		simplify: function (values) {
			values = values || {};
			var nstack = [];
			var newexpression = [];
			var n1;
			var n2;
			var f;
			var L = this.tokens.length;
			var item;
			var i = 0;
			for (i = 0; i < L; i++) {
				item = this.tokens[i];
				var type_ = item.type_;
				if (type_ === TNUMBER) {
					nstack.push(item);
				}
				else if (type_ === TVAR && hasValue(values, item.index_)) {
					item = new Token(TNUMBER, 0, 0, getValue(values, item.index_));
					nstack.push(item);
				}
				else if (type_ === TOP2 && nstack.length > 1) {
					n2 = nstack.pop();
					n1 = nstack.pop();
					f = this.ops2[item.index_];
					item = new Token(TNUMBER, 0, 0, f(n1.number_, n2.number_));
					nstack.push(item);
				}
				else if (type_ === TOP1 && nstack.length > 0) {
					n1 = nstack.pop();
					f = this.ops1[item.index_];
					item = new Token(TNUMBER, 0, 0, f(n1.number_));
					nstack.push(item);
				}
				else {
					while (nstack.length > 0) {
						newexpression.push(nstack.shift());
					}
					newexpression.push(item);
				}
			}
			while (nstack.length > 0) {
				newexpression.push(nstack.shift());
			}

			return new Expression(newexpression, object(this.ops1), object(this.ops2), object(this.functions));
		},

		substitute: function (variable, expr) {
			if (!(expr instanceof Expression)) {
				expr = new Parser().parse(String(expr));
			}
			var newexpression = [];
			var L = this.tokens.length;
			var item;
			var i = 0;
			for (i = 0; i < L; i++) {
				item = this.tokens[i];
				var type_ = item.type_;
				if (type_ === TVAR && item.index_ === variable) {
					for (var j = 0; j < expr.tokens.length; j++) {
						var expritem = expr.tokens[j];
						var replitem = new Token(expritem.type_, expritem.index_, expritem.prio_, expritem.number_);
						newexpression.push(replitem);
					}
				}
				else {
					newexpression.push(item);
				}
			}

			var ret = new Expression(newexpression, object(this.ops1), object(this.ops2), object(this.functions));
			return ret;
		},

		evaluate: function (values) {
			values = values || {};
			var nstack = [];
			var n1;
			var n2;
			var f;
			var L = this.tokens.length;
			var item;
			var i = 0;
			for (i = 0; i < L; i++) {
				item = this.tokens[i];
				var type_ = item.type_;
				if (type_ === TNUMBER) {
					nstack.push(item.number_);
				}
				else if (type_ === TOP2) {
					n2 = nstack.pop();
					n1 = nstack.pop();
					f = this.ops2[item.index_];
					nstack.push(f(n1, n2));
				}
				else if (type_ === TVAR) {
					if (hasValue(values, item.index_)) {
						nstack.push(getValue(values, item.index_));
					}
					else if (hasValue(this.functions, item.index_)) {
						nstack.push(getValue(this.functions, item.index_));
					}
					else {
						throw new Error("undefined variable: " + item.index_);
					}
				}
				else if (type_ === TOP1) {
					n1 = nstack.pop();
					f = this.ops1[item.index_];
					nstack.push(f(n1));
				}
				else if (type_ === TFUNCALL) {
					n1 = nstack.pop();
					f = nstack.pop();
					if (f.apply && f.call) {
						if (Object.prototype.toString.call(n1) == "[object Array]") {
							nstack.push(f.apply(undefined, n1));
						}
						else {
							nstack.push(f.call(undefined, n1));
						}
					}
					else {
						throw new Error(f + " is not a function");
					}
				}
				else {
					throw new Error("invalid Expression");
				}
			}
			if (nstack.length > 1) {
				throw new Error("invalid Expression (parity)");
			}
			return nstack[0];
		},

		toString: function (toJS) {
			var nstack = [];
			var n1;
			var n2;
			var f;
			var L = this.tokens.length;
			var item;
			var i = 0;
			for (i = 0; i < L; i++) {
				item = this.tokens[i];
				var type_ = item.type_;
				if (type_ === TNUMBER) {
					nstack.push(escapeValue(item.number_));
				}
				else if (type_ === TOP2) {
					n2 = nstack.pop();
					n1 = nstack.pop();
					f = item.index_;
					if (toJS && f == "^") {
						nstack.push("Math.pow(" + n1 + "," + n2 + ")");
					}
					else {
						nstack.push("(" + n1 + f + n2 + ")");
					}
				}
				else if (type_ === TVAR) {
					nstack.push(item.index_);
				}
				else if (type_ === TOP1) {
					n1 = nstack.pop();
					f = item.index_;
					if (f === "-") {
						nstack.push("(" + f + n1 + ")");
					}
					else {
						nstack.push(f + "(" + n1 + ")");
					}
				}
				else if (type_ === TFUNCALL) {
					n1 = nstack.pop();
					f = nstack.pop();
					nstack.push(f + "(" + n1 + ")");
				}
				else {
					throw new Error("invalid Expression");
				}
			}
			if (nstack.length > 1) {
				throw new Error("invalid Expression (parity)");
			}
			return nstack[0];
		},

		variables: function () {
			var L = this.tokens.length;
			var vars = [];
			for (var i = 0; i < L; i++) {
				var item = this.tokens[i];
				if (item.type_ === TVAR && (vars.indexOf(item.index_) == -1)) {
					vars.push(item.index_);
				}
			}

			return vars;
		},

		toJSFunction: function (param, variables) {
			var f = new Function(param, "with(Parser.values) { return " + this.simplify(variables).toString(true) + "; }");
			return f;
		}
	};

	function add(a, b) {
		return Number(a) + Number(b);
	}
	function sub(a, b) {
		return a - b;
	}
	function mul(a, b) {
		return a * b;
	}
	function div(a, b) {
		return a / b;
	}
	function mod(a, b) {
		return a % b;
	}
	function concat(a, b) {
		return "" + a + b;
	}
	function equal(a, b) {
		return a == b;
	}
	function notEqual(a, b) {
		return a != b;
	}
	function greaterThan(a, b) {
		return a > b;
	}
	function lessThan(a, b) {
		return a < b;
	}
	function greaterThanEqual(a, b) {
		return a >= b;
	}
	function lessThanEqual(a, b) {
		return a <= b;
	}
	function andOperator(a, b) {
		return Boolean(a && b);
	}
	function orOperator(a, b) {
		return Boolean(a || b);
	}
	function sinh(a) {
		return Math.sinh ? Math.sinh(a) : ((Math.exp(a) - Math.exp(-a)) / 2);
	}
	function cosh(a) {
		return Math.cosh ? Math.cosh(a) : ((Math.exp(a) + Math.exp(-a)) / 2);
	}
	function tanh(a) {
		if (Math.tanh) return Math.tanh(a);
		if(a === Infinity) return 1;
		if(a === -Infinity) return -1;
		return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));
	}
	function asinh(a) {
		if (Math.asinh) return Math.asinh(a);
		if(a === -Infinity) return a;
		return Math.log(a + Math.sqrt(a * a + 1));
	}
	function acosh(a) {
		return Math.acosh ? Math.acosh(a) : Math.log(a + Math.sqrt(a * a - 1));
	}
	function atanh(a) {
		return Math.atanh ? Math.atanh(a) : (Math.log((1+a)/(1-a)) / 2);
	}
	function log10(a) {
	      return Math.log(a) * Math.LOG10E;
	}
	function neg(a) {
		return -a;
	}
	function trunc(a) {
		if(Math.trunc) return Math.trunc(a);
		else return a < 0 ? Math.ceil(a) : Math.floor(a);
	}
	function random(a) {
		return Math.random() * (a || 1);
	}
	function fac(a) { //a!
		a = Math.floor(a);
		var b = a;
		while (a > 1) {
			b = b * (--a);
		}
		return b;
	}

	// TODO: use hypot that doesn't overflow
	function hypot() {
		if(Math.hypot) return Math.hypot.apply(this, arguments);
		var y = 0;
		var length = arguments.length;
		for (var i = 0; i < length; i++) {
			if (arguments[i] === Infinity || arguments[i] === -Infinity) {
				return Infinity;
			}
			y += arguments[i] * arguments[i];
		}
		return Math.sqrt(y);
	}

	function condition(cond, yep, nope) {
		return cond ? yep : nope;
	}

	function append(a, b) {
		if (Object.prototype.toString.call(a) != "[object Array]") {
			return [a, b];
		}
		a = a.slice();
		a.push(b);
		return a;
	}

	function Parser() {
		this.success = false;
		this.errormsg = "";
		this.expression = "";

		this.pos = 0;

		this.tokennumber = 0;
		this.tokenprio = 0;
		this.tokenindex = 0;
		this.tmpprio = 0;

		this.ops1 = {
			"sin": Math.sin,
			"cos": Math.cos,
			"tan": Math.tan,
			"asin": Math.asin,
			"acos": Math.acos,
			"atan": Math.atan,
			"sinh": sinh,
			"cosh": cosh,
			"tanh": tanh,
			"asinh": asinh,
			"acosh": acosh,
			"atanh": atanh,
			"sqrt": Math.sqrt,
			"log": Math.log,
			"lg" : log10,
			"log10" : log10,
			"abs": Math.abs,
			"ceil": Math.ceil,
			"floor": Math.floor,
			"round": Math.round,
			"trunc": trunc,
			"-": neg,
			"exp": Math.exp
		};

		this.ops2 = {
			"+": add,
			"-": sub,
			"*": mul,
			"/": div,
			"%": mod,
			"^": Math.pow,
			",": append,
			"||": concat,
			"==": equal,
			"!=": notEqual,
			">": greaterThan,
			"<": lessThan,
			">=": greaterThanEqual,
			"<=": lessThanEqual,
			"and": andOperator,
			"or": orOperator
		};

		this.functions = {
			"random": random,
			"fac": fac,
			"min": Math.min,
			"max": Math.max,
			"hypot": hypot,
			"pyt": hypot, // backward compat
			"pow": Math.pow,
			"atan2": Math.atan2,
			"if": condition
		};

		this.consts = {
			"E": Math.E,
			"PI": Math.PI
		};
	}

	Parser.parse = function (expr) {
		return new Parser().parse(expr);
	};

	Parser.evaluate = function (expr, variables) {
		return Parser.parse(expr).evaluate(variables);
	};

	Parser.Expression = Expression;

	Parser.values = {
		sin: Math.sin,
		cos: Math.cos,
		tan: Math.tan,
		asin: Math.asin,
		acos: Math.acos,
		atan: Math.atan,
		sinh: sinh,
		cosh: cosh,
		tanh: tanh,
		asinh: asinh,
		acosh: acosh,
		atanh: atanh,
		sqrt: Math.sqrt,
		log: Math.log,
		lg: log10,
		log10: log10,
		abs: Math.abs,
		ceil: Math.ceil,
		floor: Math.floor,
		round: Math.round,
		trunc: trunc,
		random: random,
		fac: fac,
		exp: Math.exp,
		min: Math.min,
		max: Math.max,
		hypot: hypot,
		pyt: hypot, // backward compat
		pow: Math.pow,
		atan2: Math.atan2,
		"if": condition,
		E: Math.E,
		PI: Math.PI
	};

	var PRIMARY      = 1 << 0;
	var OPERATOR     = 1 << 1;
	var FUNCTION     = 1 << 2;
	var LPAREN       = 1 << 3;
	var RPAREN       = 1 << 4;
	var COMMA        = 1 << 5;
	var SIGN         = 1 << 6;
	var CALL         = 1 << 7;
	var NULLARY_CALL = 1 << 8;

	Parser.prototype = {
		parse: function (expr) {
			this.errormsg = "";
			this.success = true;
			var operstack = [];
			var tokenstack = [];
			this.tmpprio = 0;
			var expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
			var noperators = 0;
			this.expression = expr;
			this.pos = 0;

			while (this.pos < this.expression.length) {
				if (this.isOperator()) {
					if (this.isSign() && (expected & SIGN)) {
						if (this.isNegativeSign()) {
							this.tokenprio = 2;
							this.tokenindex = "-";
							noperators++;
							this.addfunc(tokenstack, operstack, TOP1);
						}
						expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
					}
					else if (this.isComment()) {

					}
					else {
						if ((expected & OPERATOR) === 0) {
							this.error_parsing(this.pos, "unexpected operator");
						}
						noperators += 2;
						this.addfunc(tokenstack, operstack, TOP2);
						expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
					}
				}
				else if (this.isNumber()) {
					if ((expected & PRIMARY) === 0) {
						this.error_parsing(this.pos, "unexpected number");
					}
					var token = new Token(TNUMBER, 0, 0, this.tokennumber);
					tokenstack.push(token);

					expected = (OPERATOR | RPAREN | COMMA);
				}
				else if (this.isString()) {
					if ((expected & PRIMARY) === 0) {
						this.error_parsing(this.pos, "unexpected string");
					}
					var token = new Token(TNUMBER, 0, 0, this.tokennumber);
					tokenstack.push(token);

					expected = (OPERATOR | RPAREN | COMMA);
				}
				else if (this.isLeftParenth()) {
					if ((expected & LPAREN) === 0) {
						this.error_parsing(this.pos, "unexpected \"(\"");
					}

					if (expected & CALL) {
						noperators += 2;
						this.tokenprio = -2;
						this.tokenindex = -1;
						this.addfunc(tokenstack, operstack, TFUNCALL);
					}

					expected = (PRIMARY | LPAREN | FUNCTION | SIGN | NULLARY_CALL);
				}
				else if (this.isRightParenth()) {
				    if (expected & NULLARY_CALL) {
						var token = new Token(TNUMBER, 0, 0, []);
						tokenstack.push(token);
					}
					else if ((expected & RPAREN) === 0) {
						this.error_parsing(this.pos, "unexpected \")\"");
					}

					expected = (OPERATOR | RPAREN | COMMA | LPAREN | CALL);
				}
				else if (this.isComma()) {
					if ((expected & COMMA) === 0) {
						this.error_parsing(this.pos, "unexpected \",\"");
					}
					this.addfunc(tokenstack, operstack, TOP2);
					noperators += 2;
					expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
				}
				else if (this.isConst()) {
					if ((expected & PRIMARY) === 0) {
						this.error_parsing(this.pos, "unexpected constant");
					}
					var consttoken = new Token(TNUMBER, 0, 0, this.tokennumber);
					tokenstack.push(consttoken);
					expected = (OPERATOR | RPAREN | COMMA);
				}
				else if (this.isOp2()) {
					if ((expected & FUNCTION) === 0) {
						this.error_parsing(this.pos, "unexpected function");
					}
					this.addfunc(tokenstack, operstack, TOP2);
					noperators += 2;
					expected = (LPAREN);
				}
				else if (this.isOp1()) {
					if ((expected & FUNCTION) === 0) {
						this.error_parsing(this.pos, "unexpected function");
					}
					this.addfunc(tokenstack, operstack, TOP1);
					noperators++;
					expected = (LPAREN);
				}
				else if (this.isVar()) {
					if ((expected & PRIMARY) === 0) {
						this.error_parsing(this.pos, "unexpected variable");
					}
					var vartoken = new Token(TVAR, this.tokenindex, 0, 0);
					tokenstack.push(vartoken);

					expected = (OPERATOR | RPAREN | COMMA | LPAREN | CALL);
				}
				else if (this.isWhite()) {
				}
				else {
					if (this.errormsg === "") {
						this.error_parsing(this.pos, "unknown character");
					}
					else {
						this.error_parsing(this.pos, this.errormsg);
					}
				}
			}
			if (this.tmpprio < 0 || this.tmpprio >= 10) {
				this.error_parsing(this.pos, "unmatched \"()\"");
			}
			while (operstack.length > 0) {
				var tmp = operstack.pop();
				tokenstack.push(tmp);
			}
			if (noperators + 1 !== tokenstack.length) {
				//print(noperators + 1);
				//print(tokenstack);
				this.error_parsing(this.pos, "parity");
			}

			return new Expression(tokenstack, object(this.ops1), object(this.ops2), object(this.functions));
		},

		evaluate: function (expr, variables) {
			return this.parse(expr).evaluate(variables);
		},

		error_parsing: function (column, msg) {
			this.success = false;
			this.errormsg = "parse error [column " + (column) + "]: " + msg;
			this.column = column;
			throw new Error(this.errormsg);
		},

//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

		addfunc: function (tokenstack, operstack, type_) {
			var operator = new Token(type_, this.tokenindex, this.tokenprio + this.tmpprio, 0);
			while (operstack.length > 0) {
				if (operator.prio_ <= operstack[operstack.length - 1].prio_) {
					tokenstack.push(operstack.pop());
				}
				else {
					break;
				}
			}
			operstack.push(operator);
		},

		isNumber: function () {
			var r = false;
			var str = "";
			while (this.pos < this.expression.length) {
				var code = this.expression.charCodeAt(this.pos);
				if ((code >= 48 && code <= 57) || code === 46) {
					str += this.expression.charAt(this.pos);
					this.pos++;
					this.tokennumber = parseFloat(str);
					r = true;
				}
				else {
					break;
				}
			}
			return r;
		},

		// Ported from the yajjl JSON parser at http://code.google.com/p/yajjl/
		unescape: function(v, pos) {
			var buffer = [];
			var escaping = false;

			for (var i = 0; i < v.length; i++) {
				var c = v.charAt(i);

				if (escaping) {
					switch (c) {
					case "'":
						buffer.push("'");
						break;
					case '\\':
						buffer.push('\\');
						break;
					case '/':
						buffer.push('/');
						break;
					case 'b':
						buffer.push('\b');
						break;
					case 'f':
						buffer.push('\f');
						break;
					case 'n':
						buffer.push('\n');
						break;
					case 'r':
						buffer.push('\r');
						break;
					case 't':
						buffer.push('\t');
						break;
					case 'u':
						// interpret the following 4 characters as the hex of the unicode code point
						var codePoint = parseInt(v.substring(i + 1, i + 5), 16);
						buffer.push(String.fromCharCode(codePoint));
						i += 4;
						break;
					default:
						throw this.error_parsing(pos + i, "Illegal escape sequence: '\\" + c + "'");
					}
					escaping = false;
				} else {
					if (c == '\\') {
						escaping = true;
					} else {
						buffer.push(c);
					}
				}
			}

			return buffer.join('');
		},

		isString: function () {
			var r = false;
			var str = "";
			var startpos = this.pos;
			if (this.pos < this.expression.length && this.expression.charAt(this.pos) == "'") {
				this.pos++;
				while (this.pos < this.expression.length) {
					var code = this.expression.charAt(this.pos);
					if (code != "'" || str.slice(-1) == "\\") {
						str += this.expression.charAt(this.pos);
						this.pos++;
					}
					else {
						this.pos++;
						this.tokennumber = this.unescape(str, startpos);
						r = true;
						break;
					}
				}
			}
			return r;
		},

		isConst: function () {
			var str;
			for (var i in this.consts) {
				if (true) {
					var L = i.length;
					str = this.expression.substr(this.pos, L);
					if (i === str) {
						this.tokennumber = this.consts[i];
						this.pos += L;
						return true;
					}
				}
			}
			return false;
		},

		isOperator: function () {
			var code = this.expression.charCodeAt(this.pos);
			if (code === 43) { // +
				this.tokenprio = 2;
				this.tokenindex = "+";
			}
			else if (code === 45) { // -
				this.tokenprio = 2;
				this.tokenindex = "-";
			}
			else if (code === 62) { // >
				if (this.expression.charCodeAt(this.pos + 1) === 61) {
					this.pos++;
					this.tokenprio = 1;
					this.tokenindex = ">=";
				} else {
					this.tokenprio = 1;
					this.tokenindex = ">";
				}
			}
			else if (code === 60) { // <
				if (this.expression.charCodeAt(this.pos + 1) === 61) {
					this.pos++;
					this.tokenprio = 1;
					this.tokenindex = "<=";
				} else {
					this.tokenprio = 1;
					this.tokenindex = "<";
				}
			}
			else if (code === 124) { // |
				if (this.expression.charCodeAt(this.pos + 1) === 124) {
					this.pos++;
					this.tokenprio = 1;
					this.tokenindex = "||";
				}
				else {
					return false;
				}
			}
			else if (code === 61) { // =
				if (this.expression.charCodeAt(this.pos + 1) === 61) {
					this.pos++;
					this.tokenprio = 1;
					this.tokenindex = "==";
				}
				else {
					this.tokenprio = 1;
                    this.tokenindex = "==";
				}
			}
			else if (code === 33) { // !
				if (this.expression.charCodeAt(this.pos + 1) === 61) {
					this.pos++;
					this.tokenprio = 1;
					this.tokenindex = "!=";
				}
				else {
					return false;
				}
			}
			else if (code === 97) { // a
				if (this.expression.charCodeAt(this.pos + 1) === 110 && this.expression.charCodeAt(this.pos + 2) === 100) { // n && d
					this.pos++;
					this.pos++;
					this.tokenprio = 0;
					this.tokenindex = "and";
				}
				else {
					return false;
				}
			}
			else if (code === 111) { // o
				if (this.expression.charCodeAt(this.pos + 1) === 114) { // r
					this.pos++;
					this.tokenprio = 0;
					this.tokenindex = "or";
				}
				else {
					return false;
				}
			}
			else if (code === 42 || code === 8729 || code === 8226) { // * or ∙ or •
				this.tokenprio = 3;
				this.tokenindex = "*";
			}
			else if (code === 47) { // /
				this.tokenprio = 4;
				this.tokenindex = "/";
			}
			else if (code === 37) { // %
				this.tokenprio = 4;
				this.tokenindex = "%";
			}
			else if (code === 94) { // ^
				this.tokenprio = 5;
				this.tokenindex = "^";
			}
			else {
				return false;
			}
			this.pos++;
			return true;
		},

		isSign: function () {
			var code = this.expression.charCodeAt(this.pos - 1);
			if (code === 45 || code === 43) { // -
				return true;
			}
			return false;
		},

		isPositiveSign: function () {
			var code = this.expression.charCodeAt(this.pos - 1);
			if (code === 43) { // +
				return true;
			}
			return false;
		},

		isNegativeSign: function () {
			var code = this.expression.charCodeAt(this.pos - 1);
			if (code === 45) { // -
				return true;
			}
			return false;
		},

		isLeftParenth: function () {
			var code = this.expression.charCodeAt(this.pos);
			if (code === 40) { // (
				this.pos++;
				this.tmpprio += 10;
				return true;
			}
			return false;
		},

		isRightParenth: function () {
			var code = this.expression.charCodeAt(this.pos);
			if (code === 41) { // )
				this.pos++;
				this.tmpprio -= 10;
				return true;
			}
			return false;
		},

		isComma: function () {
			var code = this.expression.charCodeAt(this.pos);
			if (code === 44) { // ,
				this.pos++;
				this.tokenprio = -1;
				this.tokenindex = ",";
				return true;
			}
			return false;
		},

		isWhite: function () {
			var code = this.expression.charCodeAt(this.pos);
			if (code === 32 || code === 9 || code === 10 || code === 13) {
				this.pos++;
				return true;
			}
			return false;
		},

		isOp1: function () {
			var str = "";
			for (var i = this.pos; i < this.expression.length; i++) {
				var c = this.expression.charAt(i);
				if (c.toUpperCase() === c.toLowerCase()) {
					if (i === this.pos || (c != '_' && c != '-' && (c < '0' || c > '9'))) {
						break;
					}
				}
				str += c;
			}
			if (str.length > 0 && (str in this.ops1)) {
				this.tokenindex = str;
				this.tokenprio = 5;
				this.pos += str.length;
				return true;
			}
			return false;
		},

		isOp2: function () {
			var str = "";
			for (var i = this.pos; i < this.expression.length; i++) {
				var c = this.expression.charAt(i);
				if (c.toUpperCase() === c.toLowerCase()) {
					if (i === this.pos || (c != '_' && c != '-' && (c < '0' || c > '9'))) {
						break;
					}
				}
				str += c;
			}
			if (str.length > 0 && (str in this.ops2)) {
				this.tokenindex = str;
				this.tokenprio = 5;
				this.pos += str.length;
				return true;
			}
			return false;
		},

		isVar: function () {
			var str = "";
			for (var i = this.pos; i < this.expression.length; i++) {
				var c = this.expression.charAt(i);
				if (c.toUpperCase() === c.toLowerCase()) {
                    if (i === this.pos && c == '@') {
                        str += c;
                        continue;
                    }
					if (i === this.pos || (c != '_' && c != '-' && c != '.' && (c < '0' || c > '9'))) {
						break;
					}
				}
				str += c;
			}
			if (str.length > 0) {
				this.tokenindex = str;
				this.tokenprio = 4;
				this.pos += str.length;
				return true;
			}
			return false;
		},

		isComment: function () {
			var code = this.expression.charCodeAt(this.pos - 1);
			if (code === 47 && this.expression.charCodeAt(this.pos) === 42) {
				this.pos = this.expression.indexOf("*/", this.pos) + 2;
				if (this.pos === 1) {
					this.pos = this.expression.length;
				}
				return true;
			}
			return false;
		}
	};

	scope.Parser = Parser;
	return Parser
})(typeof exports === 'undefined' ? {} : exports);

},{}],2:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var debug, delegate, proto,
    hasProp = {}.hasOwnProperty;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:context');
  }

  delegate = require('delegates');

  proto = module.exports = {
    inspect: function() {
      return this.toJSON();
    },
    toJSON: function() {
      var ref;
      return (ref = this.property) != null ? ref.valueOf() : void 0;
    },
    "throw": function(err) {
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      err.context = this;
      throw err;
    },
    "with": function(state) {
      var k, v;
      if (state == null) {
        state = {};
      }
      for (k in state) {
        if (!hasProp.call(state, k)) continue;
        v = state[k];
        this.state[k] = v;
      }
      return this;
    },
    defer: function(data) {
      if (typeof debug === "function") {
        debug("deferring '" + this.path + "' until update");
      }
      if (typeof debug === "function") {
        debug(data);
      }
      this.root.once('update', (function(_this) {
        return function() {
          if (typeof debug === "function") {
            debug("applying deferred data (" + (typeof data) + ") into " + _this.path);
          }
          if (typeof debug === "function") {
            debug(data);
          }
          return _this.content = data;
        };
      })(this));
      return data;
    },
    debug: function() {
      return typeof debug === "function" ? debug.apply(null, arguments) : void 0;
    }
  };

  delegate(proto, 'property').method('get').method('find').method('in').method('once').method('on').access('content').getter('schema').getter('container').getter('parent').getter('name').getter('kind').getter('path').getter('root');

  delegate(proto, 'state').access('input').access('output');

  delegate(proto, 'root').method('access').method('enable').method('disable').access('engine');

}).call(this);

}).call(this,require('_process'))
},{"_process":30,"debug":21,"delegates":23}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  var Element, Emitter, debug, delegate,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  debug = require('debug')('yang:element');

  delegate = require('delegates');

  Emitter = require('events').EventEmitter;

  Emitter.defaultMaxListeners = 100;

  Element = (function() {
    Element.property = function(prop, desc) {
      return Object.defineProperty(this.prototype, prop, desc);
    };

    Element.use = function() {
      var ref, res;
      res = (ref = []).concat.apply(ref, arguments).filter(function(x) {
        return x != null;
      }).map((function(_this) {
        return function(elem) {
          var e, exists;
          exists = Element.prototype.match.call(_this, elem.kind, elem.tag);
          if (exists != null) {
            console.warn(_this.error("use: already loaded '" + elem.kind + ":" + elem.tag + "'"));
            return exists;
          }
          try {
            return Element.prototype.merge.call(_this, elem);
          } catch (error) {
            e = error;
            throw _this.error("use: unable to merge '" + elem.kind + ":" + elem.tag + "'", e);
          }
        };
      })(this));
      switch (false) {
        case !(res.length > 1):
          return res;
        case res.length !== 1:
          return res[0];
        default:
          return void 0;
      }
    };

    Element.debug = function(msg) {
      switch (typeof msg) {
        case 'object':
          return typeof debug === "function" ? debug(msg) : void 0;
        default:
          return typeof debug === "function" ? debug("[" + this.trail + "] " + msg) : void 0;
      }
    };

    Element.error = function(msg, ctx) {
      var res;
      if (ctx == null) {
        ctx = this;
      }
      res = new Error(msg);
      res.name = 'ElementError';
      res.context = ctx;
      return res;
    };

    function Element(kind1, tag1, source) {
      this.kind = kind1;
      this.tag = tag1;
      if (source == null) {
        source = {};
      }
      if (this.kind == null) {
        throw this.error("must supply 'kind' to create a new Element");
      }
      if (!(source instanceof Object)) {
        throw this.error("must supply 'source' as an object");
      }
      Object.defineProperties(this, {
        parent: {
          value: null,
          writable: true
        },
        origin: {
          value: null,
          writable: true
        },
        source: {
          value: source,
          writable: true
        },
        state: {
          value: {},
          writable: true
        },
        emitter: {
          value: new Emitter
        }
      });
    }

    delegate(Element.prototype, 'emitter').method('emit').method('once').method('on');

    delegate(Element.prototype, 'source').getter('scope').getter('construct');

    Element.property('trail', {
      get: function() {
        var mark, ref;
        mark = this.kind;
        if ((this.tag != null) && ((ref = this.source.argument) !== 'value' && ref !== 'text')) {
          mark += "(" + this.tag + ")";
        }
        if (!(this.parent instanceof Element)) {
          return mark;
        }
        return this.parent.trail + "/" + mark;
      }
    });

    Element.property('root', {
      get: function() {
        switch (false) {
          case !(this.parent instanceof Element):
            return this.parent.root;
          case !(this.origin instanceof Element):
            return this.origin.root;
          default:
            return this;
        }
      }
    });

    Element.property('node', {
      get: function() {
        return this.construct instanceof Function;
      }
    });

    Element.property('elements', {
      get: function() {
        var k, v;
        return ((function() {
          var ref, results;
          ref = this;
          results = [];
          for (k in ref) {
            v = ref[k];
            if (k !== 'parent' && k !== 'origin' && k !== 'tag') {
              results.push(v);
            }
          }
          return results;
        }).call(this)).reduce((function(a, b) {
          switch (false) {
            case !(b instanceof Element):
              return a.concat(b);
            case !(b instanceof Array):
              return a.concat(b.filter(function(x) {
                return x instanceof Element;
              }));
            default:
              return a;
          }
        }), []);
      }
    });

    Element.property('nodes', {
      get: function() {
        return this.elements.filter(function(x) {
          return x.node === true;
        });
      }
    });

    Element.property('attrs', {
      get: function() {
        return this.elements.filter(function(x) {
          return x.node === false;
        });
      }
    });

    Element.property('*', {
      get: function() {
        return this.nodes;
      }
    });

    Element.property('..', {
      get: function() {
        return this.parent;
      }
    });

    Element.prototype.clone = function() {
      var copy, ref;
      this.debug("cloning " + this.kind + ":" + this.tag + " with " + this.elements.length + " elements");
      copy = (new this.constructor(this.kind, this.tag, this.source))["extends"](this.elements.map((function(_this) {
        return function(x) {
          var c;
          c = x.clone();
          if (x.parent !== _this) {
            c.parent = x.parent;
          }
          return c;
        };
      })(this)));
      copy.state = this.state;
      copy.origin = (ref = this.origin) != null ? ref : this;
      return copy;
    };

    Element.prototype["extends"] = function() {
      var elems, ref;
      elems = ((ref = []).concat.apply(ref, arguments)).filter(function(x) {
        return (x != null) && !!x;
      });
      if (!(elems.length > 0)) {
        return this;
      }
      elems.forEach((function(_this) {
        return function(expr) {
          return _this.merge(expr);
        };
      })(this));
      this.emit.apply(this, ['change'].concat(slice.call(elems)));
      return this;
    };

    Element.prototype.merge = function(elem, opts) {
      var _merge, exists;
      if (opts == null) {
        opts = {};
      }
      if (!(elem instanceof Element)) {
        throw this.error("cannot merge invalid element into Element", elem);
      }
      if (elem.parent == null) {
        elem.parent = this;
      }
      _merge = function(item) {
        var i, j, len, ref, ref1, ref2, x;
        if (opts.append === true || (ref = item.tag, indexOf.call((ref1 = this.tags) != null ? ref1 : [], ref) < 0)) {
          this.push(item);
          return true;
        } else if (opts.replace === true) {
          ref2 = this;
          for (i = j = 0, len = ref2.length; j < len; i = ++j) {
            x = ref2[i];
            if (!(x.tag === item.tag)) {
              continue;
            }
            this.splice(i, 1, item);
            break;
          }
          return true;
        } else {
          return false;
        }
      };
      if (this.scope == null) {
        if (!this.hasOwnProperty(elem.kind)) {
          this[elem.kind] = elem;
          return elem;
        }
        if (!Array.isArray(this[elem.kind])) {
          exists = this[elem.kind];
          this[elem.kind] = [exists];
          Object.defineProperty(this[elem.kind], 'tags', {
            get: (function() {
              return this.map(function(x) {
                return x.tag;
              });
            }).bind(this[elem.kind])
          });
        }
        if (!_merge.call(this[elem.kind], elem)) {
          throw this.error("constraint violation for '" + elem.kind + " " + elem.tag + "' - cannot define more than once");
        }
        return elem;
      }
      if (!(elem.kind in this.scope)) {
        if (elem.scope != null) {
          this.debug(this.scope);
          throw this.error("scope violation - invalid '" + elem.kind + "' extension found");
        } else {
          this.scope[elem.kind] = '*';
        }
      }
      switch (this.scope[elem.kind]) {
        case '0..n':
        case '1..n':
        case '*':
          if (!this.hasOwnProperty(elem.kind)) {
            this[elem.kind] = [];
            Object.defineProperty(this[elem.kind], 'tags', {
              get: (function() {
                return this.map(function(x) {
                  return x.tag;
                });
              }).bind(this[elem.kind])
            });
          }
          if (!_merge.call(this[elem.kind], elem)) {
            throw this.error("constraint violation for '" + elem.kind + " " + elem.tag + "' - already defined");
          }
          break;
        case '0..1':
        case '1':
          if (!this.hasOwnProperty(elem.kind)) {
            this[elem.kind] = elem;
          } else if (opts.replace === true) {
            this.debug("replacing pre-existing " + elem.kind);
            this[elem.kind] = elem;
          } else {
            throw this.error("constraint violation for '" + elem.kind + "' - cannot define more than once");
          }
          break;
        default:
          throw this.error("unrecognized scope constraint defined for '" + elem.kind + "' with " + this.scope[elem.kind]);
      }
      return elem;
    };

    Element.prototype.update = function(elem) {
      var exists, j, len, ref, target;
      if (!(elem instanceof Element)) {
        throw this.error("cannot update a non-Element into an Element", elem);
      }
      exists = Element.prototype.match.call(this, elem.kind, elem.tag);
      if (exists == null) {
        return this.merge(elem);
      }
      ref = elem.elements;
      for (j = 0, len = ref.length; j < len; j++) {
        target = ref[j];
        exists.update(target);
      }
      return exists;
    };

    Element.prototype.lookup = function(kind, tag) {
      var res;
      res = (function() {
        switch (false) {
          case this instanceof Object:
            return void 0;
          case !(this instanceof Element):
            return this.match(kind, tag);
          default:
            return Element.prototype.match.call(this, kind, tag);
        }
      }).call(this);
      if (res == null) {
        res = (function() {
          switch (false) {
            case this.origin == null:
              return Element.prototype.lookup.apply(this.origin, arguments);
            case this.parent == null:
              return Element.prototype.lookup.apply(this.parent, arguments);
            default:
              return Element.prototype.match.call(this.constructor, kind, tag);
          }
        }).apply(this, arguments);
      }
      return res;
    };

    Element.prototype.locate = function(ypath) {
      var key, match, ref, rest;
      if (ypath == null) {
        return;
      }
      if (typeof ypath === 'string') {
        this.debug("locate: " + ypath);
        ypath = ypath.replace(/\s/g, '');
        if ((/^\//.test(ypath)) && this !== this.root) {
          return this.root.locate(ypath);
        }
        ref = ypath.split('/').filter(function(e) {
          return !!e;
        }), key = ref[0], rest = 2 <= ref.length ? slice.call(ref, 1) : [];
      } else {
        this.debug("locate: " + (ypath.join('/')));
        key = ypath[0], rest = 2 <= ypath.length ? slice.call(ypath, 1) : [];
      }
      if (key == null) {
        return this;
      }
      match = (function() {
        switch (false) {
          case key !== '..':
            return this.match(key);
          default:
            return this.match('*', key);
        }
      }).call(this);
      switch (false) {
        case rest.length !== 0:
          return match;
        default:
          return match != null ? match.locate(rest) : void 0;
      }
    };

    Element.prototype.match = function(kind, tag) {
      var elem, j, key, len, match;
      if (!((kind != null) && (this[kind] != null))) {
        return;
      }
      if (tag == null) {
        return this[kind];
      }
      match = this[kind];
      if (!(match instanceof Array)) {
        match = [match];
      }
      if (tag === '*') {
        return match;
      }
      for (j = 0, len = match.length; j < len; j++) {
        elem = match[j];
        if (!(elem instanceof Element)) {
          continue;
        }
        key = elem.tag != null ? elem.tag : elem.kind;
        if (tag === key) {
          return elem;
        }
      }
      return void 0;
    };

    Element.prototype.error = Element.error;

    Element.prototype.debug = Element.debug;

    Element.prototype.toJSON = function(opts) {
      var obj, sub;
      if (opts == null) {
        opts = {
          tag: true,
          extended: false
        };
      }
      sub = this.elements.filter((function(_this) {
        return function(x) {
          return opts.extended || x.parent === _this;
        };
      })(this)).reduce((function(a, b) {
        var k, kk, ref, v, vv;
        ref = b.toJSON();
        for (k in ref) {
          v = ref[k];
          if (a[k] instanceof Object) {
            if (v instanceof Object) {
              for (kk in v) {
                vv = v[kk];
                a[k][kk] = vv;
              }
            }
          } else {
            a[k] = v;
          }
        }
        return a;
      }), {});
      if (opts.tag) {
        return (
          obj = {},
          obj["" + this.kind] = (function() {
            var obj1;
            switch (false) {
              case !(Object.keys(sub).length > 0):
                if (this.tag != null) {
                  return (
                    obj1 = {},
                    obj1["" + this.tag] = sub,
                    obj1
                  );
                } else {
                  return sub;
                }
                break;
              case !(this.tag instanceof Object):
                return "" + this.tag;
              default:
                return this.tag;
            }
          }).call(this),
          obj
        );
      } else {
        return sub;
      }
    };

    return Element;

  })();

  module.exports = Element;

}).call(this);

},{"debug":21,"delegates":23,"events":24}],4:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var Element, Expression, debug, delegate,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:expression');
  }

  delegate = require('delegates');

  Element = require('./element');

  Expression = (function(superClass) {
    extend(Expression, superClass);

    delegate(Expression.prototype, 'source').getter('resolve').getter('transform').getter('construct').getter('predicate').getter('compose');

    Expression.property('exprs', {
      get: function() {
        return this.elements.filter(function(x) {
          return x instanceof Expression;
        });
      }
    });

    function Expression() {
      var BoundExpression, self;
      Expression.__super__.constructor.apply(this, arguments);
      this.argument = this.source.argument;
      BoundExpression = (function() {
        return self["eval"].apply(self, arguments);
      });
      self = Object.setPrototypeOf(BoundExpression, this);
      self.id = this.kind + (this.tag != null ? "(" + this.tag + ")" : '');
      delete self.length;
      return self;
    }

    Expression.prototype.clone = function() {
      var copy;
      copy = Expression.__super__.clone.apply(this, arguments);
      copy.resolved = this.resolved;
      if (this.binding != null) {
        copy.binding = this.binding;
      }
      if (this.convert != null) {
        copy.convert = this.convert;
      }
      if (this.node) {
        this.once('bind', function(func) {
          if (copy.binding == null) {
            copy.binding = func;
          }
          return copy.emit('bind', func);
        });
      }
      return copy;
    };

    Expression.prototype.compile = function() {
      var ref;
      if (typeof debug === "function") {
        debug("[" + this.trail + "] compile enter... (" + this.resolved + ")");
      }
      this.emit('compile:before', arguments);
      if (!this.resolved) {
        if ((ref = this.resolve) != null) {
          ref.apply(this, arguments);
        }
      }
      if ((this.tag != null) && (this.argument == null)) {
        throw this.error("cannot contain argument '" + this.tag + "' for expression '" + this.kind + "'");
      }
      if ((this.argument != null) && (this.tag == null)) {
        throw this.error("must contain argument '" + this.argument + "' for expression '" + this.kind + "'");
      }
      if (this.exprs.length) {
        if (typeof debug === "function") {
          debug("[" + this.trail + "] has sub-expressions: " + (this.exprs.map(function(x) {
            return x.kind;
          })));
        }
      }
      this.exprs.forEach(function(x) {
        return x.compile();
      });
      this.resolved = true;
      this.emit('compile:after');
      if (typeof debug === "function") {
        debug("[" + this.trail + "] compile: ok");
      }
      return this;
    };

    Expression.prototype.bind = function() {
      var binding, data, e, i, key, obj;
      key = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), data = arguments[i++];
      if (!(data instanceof Object)) {
        return this;
      }
      if (key.length) {
        return this.bind((
          obj = {},
          obj["" + key[0]] = data,
          obj
        ));
      }
      if (data instanceof Function) {
        if (typeof debug === "function") {
          debug("bind: registering function at " + this.trail);
        }
        this.binding = data;
        this.emit('bind', data);
        return this;
      }
      for (key in data) {
        binding = data[key];
        try {
          this.locate(key).bind(binding);
        } catch (error) {
          e = error;
          if (e.name === 'ExpressionError') {
            throw e;
          }
          throw this.error("failed to bind to '" + key + "' (schema-path not found)", e);
        }
      }
      return this;
    };

    Expression.prototype.apply = function(data, ctx) {
      var e, expr, i, len, ref, ref1;
      if (ctx == null) {
        ctx = {};
      }
      if (!this.resolved) {
        this.compile();
      }
      this.emit('apply:before', data);
      if (typeof debug === "function") {
        debug("[" + this.trail + "] applying data to schema expression:");
      }
      if (typeof debug === "function") {
        debug(this);
      }
      if (this.transform != null) {
        data = this.transform.call(this, data, ctx);
      } else {
        ref = this.exprs;
        for (i = 0, len = ref.length; i < len; i++) {
          expr = ref[i];
          if (data != null) {
            data = expr["eval"](data, ctx);
          }
        }
      }
      try {
        if ((ref1 = this.predicate) != null) {
          ref1.call(this, data);
        }
      } catch (error) {
        e = error;
        if (typeof debug === "function") {
          debug(data);
        }
        throw this.error("predicate validation error: " + e, data);
      }
      this.emit('apply:after', data);
      return data;
    };

    Expression.prototype["eval"] = function(data, ctx) {
      if (ctx == null) {
        ctx = {};
      }
      if (!this.resolved) {
        this.compile();
      }
      if (typeof debug === "function") {
        debug("[" + this.trail + "] eval");
      }
      if (typeof debug === "function") {
        debug(this);
      }
      if (this.node === true) {
        return this.construct.call(this, data, ctx);
      } else {
        return this.apply(data, ctx);
      }
    };

    Expression.prototype.update = function(elem) {
      var res;
      res = Expression.__super__.update.apply(this, arguments);
      res.binding = elem.binding;
      return res;
    };

    Expression.prototype.error = function() {
      var res;
      res = Expression.__super__.error.apply(this, arguments);
      res.name = 'ExpressionError';
      return res;
    };

    return Expression;

  })(Element);

  module.exports = Expression;

}).call(this);

}).call(this,require('_process'))
},{"./element":3,"_process":30,"debug":21,"delegates":23}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  var Expression, Extension,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Expression = require('./expression');

  Extension = (function(superClass) {
    extend(Extension, superClass);

    Extension.scope = {
      argument: '0..1',
      description: '0..1',
      reference: '0..1',
      status: '0..1'
    };

    function Extension(name, spec) {
      if (spec == null) {
        spec = {};
      }
      if (spec.scope == null) {
        spec.scope = {};
      }
      Extension.__super__.constructor.call(this, 'extension', name, spec);
    }

    return Extension;

  })(Expression);

  module.exports = Extension;

}).call(this);

},{"./expression":4}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2

/* yang-js
 *
 * The **yang-js** module provides support for basic set of YANG schema
 * modeling language by using the built-in *extension* syntax to define
 * additional schema language constructs.
 *
 */

(function() {
  var Yang, exports, ref;

  Yang = require('./yang');

  Yang.use(require('./lang/extensions'), require('./lang/typedefs'));

  exports = module.exports = Yang;

  exports.Extension = require('./extension');

  exports.Typedef = require('./typedef');

  exports.Model = require('./model');

  exports.Property = require('./property');

  if ((ref = require.extensions) != null) {
    if (ref['.yang'] == null) {
      ref['.yang'] = function(m, filename) {
        return m.exports = Yang["import"](filename);
      };
    }
  }

}).call(this);

},{"./extension":5,"./lang/extensions":7,"./lang/typedefs":8,"./model":9,"./property":10,"./typedef":11,"./yang":13}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  var ARGUMENT_NAMES, Extension, Model, STRIP_COMMENTS, XPath, Yang, assert,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Yang = require('../yang');

  Model = require('../model');

  XPath = require('../xpath');

  Extension = require('../extension');

  assert = require('assert');

  STRIP_COMMENTS = /(\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s*=[^,\)]*(('(?:\\'|[^'\r\n])*')|("(?:\\"|[^"\r\n])*"))|(\s*=[^,\)]*))/mg;

  ARGUMENT_NAMES = /([^\s,]+)/g;

  module.exports = [
    new Extension('action', {
      argument: 'name',
      scope: {
        description: '0..1',
        grouping: '0..n',
        'if-feature': '0..n',
        input: '0..1',
        output: '0..1',
        reference: '0..1',
        status: '0..1',
        typedef: '0..n'
      },
      predicate: function(data) {
        if (data == null) {
          data = function() {};
        }
        return assert(data instanceof Function, "data must contain a valid instanceof Function");
      },
      transform: function(data) {
        var expr, i, len, ref1, ref2;
        if (data == null) {
          data = (ref1 = this.binding) != null ? ref1 : (function(_this) {
            return function() {
              throw _this.error("missing function binding");
            };
          })(this);
        }
        if (!(data instanceof Function)) {
          this.debug(data);
          throw this.error("expected a function but got a '" + (typeof data) + "'");
        }
        ref2 = this.exprs;
        for (i = 0, len = ref2.length; i < len; i++) {
          expr = ref2[i];
          data = expr["eval"](data);
        }
        return data;
      },
      construct: function(data) {
        if (data == null) {
          data = {};
        }
        return (new Model.Property(this.tag, this)).join(data);
      },
      compose: function(data, opts) {
        var expr, i, kind, len, match, matches, possibilities, ref1;
        if (opts == null) {
          opts = {};
        }
        if (!(data instanceof Function)) {
          return;
        }
        if (Object.keys(data).length !== 0) {
          return;
        }
        if (!((data.prototype == null) || Object.keys(data.prototype).length === 0)) {
          return;
        }
        possibilities = (function() {
          var ref1, results;
          ref1 = this.scope;
          results = [];
          for (kind in ref1) {
            if (!hasProp.call(ref1, kind)) continue;
            results.push(this.lookup('extension', kind));
          }
          return results;
        }).call(this);
        matches = [];
        for (i = 0, len = possibilities.length; i < len; i++) {
          expr = possibilities[i];
          if (!(expr != null)) {
            continue;
          }
          match = typeof expr.compose === "function" ? expr.compose(data) : void 0;
          if (match != null) {
            matches.push(match);
          }
        }
        return (ref1 = new Yang(this.tag, opts.tag, this))["extends"].apply(ref1, matches);
      }
    }), new Extension('anydata', {
      argument: 'name',
      scope: {
        config: '0..1',
        description: '0..1',
        'if-feature': '0..n',
        mandatory: '0..1',
        must: '0..n',
        reference: '0..1',
        status: '0..1',
        when: '0..1'
      },
      construct: function() {
        return this.apply.apply(this, arguments);
      }
    }), new Extension('argument', {
      argument: 'arg-type',
      scope: {
        'yin-element': '0..1'
      }
    }), new Extension('augment', {
      argument: 'target-node',
      scope: {
        action: '0..n',
        anydata: '0..n',
        anyxml: '0..n',
        "case": '0..n',
        choice: '0..n',
        container: '0..n',
        description: '0..1',
        'if-feature': '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        notification: '0..n',
        reference: '0..1',
        status: '0..1',
        uses: '0..n',
        when: '0..1'
      },
      resolve: function() {
        var target;
        target = (function() {
          switch (this.parent.kind) {
            case 'module':
              if (!/^\//.test(this.tag)) {
                throw this.error("'" + this.tag + "' must be absolute-schema-path to augment within module statement");
              }
              return this.locate(this.tag);
            case 'uses':
              if (/^\//.test(this.tag)) {
                throw this.error("'" + this.tag + "' must be relative-schema-path to augment within uses statement");
              }
              return this.parent.state.grouping.locate(this.tag);
          }
        }).call(this);
        if (target == null) {
          console.warn(this.error("unable to locate '" + this.tag + "'"));
          return;
        }
        if (this.when == null) {
          return this.once('compile:after', (function(_this) {
            return function() {
              var from;
              _this.debug("augmenting '" + target.kind + ":" + target.tag + "'");
              if (_this.parent.kind === 'module' && target.root !== _this.root) {
                from = _this.root.tag;
              }
              return target["extends"](_this.nodes.map(function(x) {
                var copy;
                copy = x.clone();
                if (from != null) {
                  copy.tag = from + ":" + x.tag;
                }
                return copy;
              }));
            };
          })(this));
        } else {
          return target.on('apply:after', (function(_this) {
            return function(data) {
              var expr, i, len, ref1, results;
              if (data != null) {
                ref1 = _this.exprs;
                results = [];
                for (i = 0, len = ref1.length; i < len; i++) {
                  expr = ref1[i];
                  results.push(data = expr.apply(data));
                }
                return results;
              }
            };
          })(this));
        }
      }
    }), new Extension('base', {
      argument: 'name',
      resolve: function() {
        var ref;
        ref = this.state.identity = this.lookup('identity', this.tag);
        if (ref == null) {
          throw this.error("unable to resolve '" + this.tag + "' identity");
        }
      }
    }), new Extension('belongs-to', {
      argument: 'module-name',
      scope: {
        prefix: '1'
      },
      resolve: function() {
        this.module = this.lookup('module', this.tag);
        if (this.module == null) {
          throw this.error("unable to resolve '" + this.tag + "' module");
        }
      }
    }), new Extension('bit', {
      argument: 'name',
      scope: {
        description: '0..1',
        'if-feature': '0..n',
        reference: '0..1',
        status: '0..1',
        position: '0..1'
      }
    }), new Extension('case', {
      argument: 'name',
      scope: {
        anyxml: '0..n',
        choice: '0..n',
        container: '0..n',
        description: '0..1',
        'if-feature': '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        reference: '0..1',
        status: '0..1',
        uses: '0..n',
        when: '0..1'
      },
      resolve: function() {
        return this.once('compile:after', (function(_this) {
          return function() {
            if (!(_this.nodes.length > 0)) {
              throw _this.error("cannot have an empty case statement");
            }
          };
        })(this));
      },
      transform: function(data, ctx) {
        var expr, i, keys, len, ref1;
        if (!(data instanceof Object)) {
          return data;
        }
        keys = Object.keys(data);
        if (!(this.nodes.some(function(x) {
          var ref1;
          return ref1 = x.tag, indexOf.call(keys, ref1) >= 0;
        }))) {
          return data;
        }
        ref1 = this.exprs;
        for (i = 0, len = ref1.length; i < len; i++) {
          expr = ref1[i];
          data = expr["eval"](data, ctx);
        }
        return data;
      },
      predicate: function(data) {
        assert(data instanceof Object, "data must contain Object data");
        return assert(this.nodes.some(function(x) {
          return x.tag in data;
        }), "data must contain a matching element");
      }
    }), new Extension('choice', {
      argument: 'condition',
      scope: {
        anyxml: '0..n',
        "case": '0..n',
        config: '0..1',
        container: '0..n',
        "default": '0..1',
        description: '0..1',
        'if-feature': '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        mandatory: '0..1',
        reference: '0..1',
        status: '0..1',
        when: '0..1'
      },
      resolve: function() {
        var ref1, ref2;
        if (this.nodes.length > 0 && this.nodes.length !== ((ref1 = this["case"]) != null ? ref1.length : void 0)) {
          throw this.error("cannot contain more than one non-case data node statement");
        }
        if (((ref2 = this.mandatory) != null ? ref2.tag : void 0) === 'true' && (this["default"] != null)) {
          throw this.error("cannot define 'default' when 'mandatory' is true");
        }
        if ((this["default"] != null) && ((this.match('case', this["default"].tag)) == null)) {
          throw this.error("cannot specify default '" + this["default"].tag + "' without a corresponding case");
        }
      },
      transform: function(data, ctx) {
        var attr, block, defcase, expr, i, j, l, len, len1, len2, len3, match, n, ref1, ref2, ref3, ref4;
        if (this["case"] == null) {
          ref1 = this.exprs;
          for (i = 0, len = ref1.length; i < len; i++) {
            expr = ref1[i];
            data = expr["eval"](data, ctx);
          }
          return data;
        }
        ref2 = this["case"];
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          block = ref2[j];
          this.debug("checking if case " + block.tag + "...");
          try {
            data = block["eval"](data, ctx);
            match = block.tag;
            break;
          } catch (error) {}
        }
        switch (false) {
          case !((match == null) && (this["default"] != null)):
            this.debug("choice fallback to default: " + this["default"].tag);
            match = this["default"].tag;
            defcase = this.match('case', this["default"].tag);
            ref3 = defcase.exprs;
            for (l = 0, len2 = ref3.length; l < len2; l++) {
              expr = ref3[l];
              data = expr["eval"](data, ctx);
            }
            break;
          case !((match == null) && (this.mandatory != null)):
            throw this.error("no matching choice found (mandatory)");
        }
        ref4 = this.attrs;
        for (n = 0, len3 = ref4.length; n < len3; n++) {
          attr = ref4[n];
          if (attr.kind !== 'case') {
            data = attr["eval"](data, ctx);
          }
        }
        Object.defineProperty(data, '@choice', {
          value: match
        });
        return data;
      },
      construct: function() {
        return this.apply.apply(this, arguments);
      }
    }), new Extension('config', {
      argument: 'value',
      resolve: function() {
        this.tag = this.tag === true || this.tag === 'true';
        return this.parent.once('compile:after', (function(_this) {
          return function() {
            return _this.parent.nodes.map(function(node) {
              try {
                return node.update(_this);
              } catch (error) {}
            });
          };
        })(this));
      }
    }), new Extension('contact', {
      argument: 'text',
      yin: true
    }), new Extension('container', {
      argument: 'name',
      scope: {
        action: '0..n',
        anydata: '0..n',
        anyxml: '0..n',
        choice: '0..n',
        config: '0..1',
        container: '0..n',
        description: '0..1',
        grouping: '0..n',
        'if-feature': '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        must: '0..n',
        notification: '0..n',
        presence: '0..1',
        reference: '0..1',
        status: '0..1',
        typedef: '0..n',
        uses: '0..n',
        when: '0..1'
      },
      predicate: function(data) {
        if (data == null) {
          data = {};
        }
        return assert(data instanceof Object, "data must contain instance of Object");
      },
      construct: function(data, ctx) {
        if (data == null) {
          data = {};
        }
        if (ctx == null) {
          ctx = {};
        }
        return (new Model.Property(this.datakey, this)).join(data, ctx.state);
      },
      compose: function(data, opts) {
        var expr, i, k, kind, len, match, matches, parents, possibilities, ref1, ref2, v;
        if (opts == null) {
          opts = {};
        }
        if (!(data === Object(data) && !Array.isArray(data))) {
          return;
        }
        possibilities = (function() {
          var ref1, results;
          ref1 = this.scope;
          results = [];
          for (kind in ref1) {
            if (!hasProp.call(ref1, kind)) continue;
            results.push(this.lookup('extension', kind));
          }
          return results;
        }).call(this);
        matches = [];
        parents = (ref1 = opts.parents) != null ? ref1 : [];
        parents.push(data);
        for (k in data) {
          if (!hasProp.call(data, k)) continue;
          try {
            v = data[k];
          } catch (error) {
            continue;
          }
          if (indexOf.call(parents, v) >= 0) {
            this.debug("found circular entry for '" + k + "'");
            matches.push(Yang("anydata " + k + ";"));
            continue;
          }
          for (i = 0, len = possibilities.length; i < len; i++) {
            expr = possibilities[i];
            if (!((expr != null ? expr.compose : void 0) != null)) {
              continue;
            }
            this.debug("checking '" + k + "' to see if " + expr.tag);
            match = expr.compose(v, {
              tag: k,
              parents: parents
            });
            if (match != null) {
              break;
            }
          }
          if (match == null) {
            return;
          }
          matches.push(match);
        }
        parents.pop();
        return (ref2 = new Yang(this.tag, opts.tag, this))["extends"].apply(ref2, matches);
      }
    }), new Extension('default', {
      argument: 'value',
      transform: function(data) {
        return data != null ? data : this.tag;
      }
    }), new Extension('description', {
      argument: 'text',
      yin: true
    }), new Extension('deviate', {
      argument: 'value',
      scope: {
        config: '0..1',
        "default": '0..1',
        mandatory: '0..1',
        'max-elements': '0..1',
        'min-elements': '0..1',
        must: '0..n',
        type: '0..1',
        unique: '0..1',
        units: '0..1'
      }
    }), new Extension('deviation', {
      argument: 'target-node',
      scope: {
        description: '0..1',
        deviate: '1..n',
        reference: '0..1'
      }
    }), new Extension('enum', {
      argument: 'name',
      scope: {
        description: '0..1',
        'if-feature': '0..n',
        reference: '0..1',
        status: '0..1',
        value: '0..1'
      },
      resolve: function() {
        var base, cval;
        if ((base = this.parent).enumValue == null) {
          base.enumValue = 0;
        }
        if (this.value == null) {
          return this["extends"](this.constructor.parse("value " + (this.parent.enumValue++) + ";"));
        } else {
          cval = (Number(this.value.tag)) + 1;
          if (!(this.parent.enumValue > cval)) {
            return this.parent.enumValue = cval;
          }
        }
      }
    }), new Extension('error-app-tag', {
      argument: 'value'
    }), new Extension('error-message', {
      argument: 'value',
      yin: true
    }), new Extension('extension', {
      argument: 'extension-name',
      scope: {
        argument: '0..1',
        description: '0..1',
        reference: '0..1',
        status: '0..1'
      },
      resolve: function() {
        if (this.kind !== 'extension') {
          if (this.argument === this.source.argument) {
            delete this.argument;
          }
        }
        return this.once('bind', (function(_this) {
          return function() {
            var name, opts, prefix, ref1;
            prefix = _this.lookup('prefix');
            name = prefix + ":" + _this.tag;
            _this.debug("registering new bound extension '" + name + "'");
            opts = _this.binding();
            if (opts.argument == null) {
              opts.argument = (ref1 = _this.argument) != null ? ref1.valueOf() : void 0;
            }
            _this.source = new Extension("" + name, opts);
            if (opts.global === true) {
              _this.constructor.scope[name] = '0..n';
            }
            return _this.constructor.use(_this.source);
          };
        })(this));
      }
    }), new Extension('feature', {
      argument: 'name',
      scope: {
        description: '0..1',
        'if-feature': '0..n',
        reference: '0..1',
        status: '0..1'
      },
      construct: function(data, ctx) {
        var expr, feature, i, len, ref1;
        feature = this.binding;
        ref1 = this.exprs;
        for (i = 0, len = ref1.length; i < len; i++) {
          expr = ref1[i];
          feature = expr["eval"](feature);
        }
        if (feature != null) {
          (new Model.Property(this.tag, this)).join(ctx.engine);
        }
        return data;
      }
    }), new Extension('fraction-digits', {
      argument: 'value'
    }), new Extension('grouping', {
      argument: 'name',
      scope: {
        action: '0..n',
        anydata: '0..n',
        anyxml: '0..n',
        choice: '0..n',
        container: '0..n',
        description: '0..1',
        grouping: '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        notification: '0..n',
        reference: '0..1',
        status: '0..1',
        typedef: '0..n',
        uses: '0..n'
      },
      transform: function(data) {
        return data;
      }
    }), new Extension('identity', {
      argument: 'name',
      scope: {
        base: '0..1',
        description: '0..1',
        reference: '0..1',
        status: '0..1'
      },
      resolve: function() {
        if (this.base != null) {
          return this.lookup('identity', this.base.tag);
        }
      }
    }), new Extension('if-feature', {
      argument: 'feature-name',
      transform: function(data) {
        var feature;
        feature = this.lookup('feature', this.tag);
        if ((feature != null ? feature.binding : void 0) != null) {
          return data;
        }
      }
    }), new Extension('import', {
      argument: 'module',
      scope: {
        prefix: '1',
        'revision-date': '0..1'
      },
      resolve: function() {
        var module, ref1, rev;
        module = this.lookup('module', this.tag);
        if (module == null) {
          throw this.error("unable to resolve '" + this.tag + "' module");
        }
        Object.defineProperty(this, 'module', {
          configurable: true,
          value: module
        });
        rev = (ref1 = this['revision-date']) != null ? ref1.tag : void 0;
        if ((rev != null) && ((this.module.match('revision', rev)) == null)) {
          throw this.error("requested " + rev + " not available in " + this.tag);
        }
      },
      transform: function(data) {
        if (!(this.module.tag in Model.Store)) {
          this.debug("IMPORT: absorbing data for '" + this.tag + "'");
          this.module["eval"](data);
        }
        this.module.nodes.forEach(function(x) {
          return delete data[x.datakey];
        });
        return data;
      }
    }), new Extension('include', {
      argument: 'module',
      scope: {
        'revision-date': '0..1'
      },
      resolve: function() {
        var i, len, m, ref1, x;
        m = this.lookup('submodule', this.tag);
        if (m == null) {
          throw this.error("unable to resolve '" + this.tag + "' submodule");
        }
        if (this.parent.tag !== m['belongs-to'].tag) {
          throw m.error("requested submodule '" + this.tag + "' not belongs-to '" + this.parent.tag + "'");
        }
        Object.defineProperty(m['belongs-to'], 'module', {
          configurable: true,
          value: this.parent
        });
        ref1 = m.compile().elements;
        for (i = 0, len = ref1.length; i < len; i++) {
          x = ref1[i];
          if (m.scope[x.kind] === '0..n' && x.kind !== 'revision') {
            this.parent.update(x);
          }
        }
        return m.parent = this;
      }
    }), new Extension('input', {
      scope: {
        anydata: '0..n',
        anyxml: '0..n',
        choice: '0..n',
        container: '0..n',
        grouping: '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        typedef: '0..n',
        uses: '0..n'
      },
      transform: function(data, ctx) {
        var expr, i, index, input, j, keys, l, len, len1, len2, name1, node, ref1, ref2, ref3, singular;
        if (typeof data !== 'object') {
          return;
        }
        input = data;
        keys = this.nodes.reduce((function(a, b) {
          var c, i, len, ref1, ref2;
          if (b.kind === 'choice' && ((ref1 = b["case"]) != null ? ref1.length : void 0) > 0) {
            ref2 = b["case"];
            for (i = 0, len = ref2.length; i < len; i++) {
              c = ref2[i];
              a.push.apply(a, c.nodes.map(function(x) {
                return x.tag;
              }));
            }
          } else {
            a.push(b.tag);
          }
          return a;
        }), []);
        if ((data.length != null) && keys.length) {
          this.debug("input transform with: " + keys);
          if (data.length === 1 && typeof data[0] === 'object' && Object.keys(data[0]).some(function(x) {
            return indexOf.call(keys, x) >= 0;
          })) {
            singular = true;
            input = data[0];
          } else {
            ref1 = this.nodes;
            for (index = i = 0, len = ref1.length; i < len; index = ++i) {
              node = ref1[index];
              if (input[name1 = node.tag] == null) {
                input[name1] = data[index];
              }
            }
          }
        }
        ref2 = this.exprs;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          expr = ref2[j];
          if (input != null) {
            input = expr["eval"](input, ctx);
          }
        }
        switch (false) {
          case !singular:
            data[0] = input;
            break;
          case !((data.length != null) && keys.length):
            ref3 = this.nodes;
            for (index = l = 0, len2 = ref3.length; l < len2; index = ++l) {
              node = ref3[index];
              data[index] = input[node.tag];
            }
        }
        return input;
      },
      construct: function(data) {
        if (data == null) {
          data = {};
        }
        return (new Model.Property(this.kind, this)).join(data);
      },
      compose: function(data, opts) {
        var ref1, res, str;
        if (opts == null) {
          opts = {};
        }
        if (!(data instanceof Function)) {
          return;
        }
        str = data.toString().replace(STRIP_COMMENTS, '');
        res = (ref1 = str.slice(str.indexOf('(') + 1, str.indexOf(')')).match(ARGUMENT_NAMES)) != null ? ref1 : [];
        if (data.length !== res.length) {
          this.debug("argument length mismatch: expected " + data.length + " but got " + res.length);
        }
        return (new Yang(this.tag, null, this))["extends"](res.map(function(x) {
          return Yang("anydata " + x + ";");
        }));
      }
    }), new Extension('key', {
      argument: 'value',
      resolve: function() {
        return this.parent.once('compile:after', (function(_this) {
          return function() {
            _this.tag = _this.tag.split(' ');
            if (!(_this.tag.every(function(k) {
              return _this.parent.match('leaf', k) != null;
            }))) {
              throw _this.error("unable to reference key items as leaf elements", _this.parent);
            }
          };
        })(this));
      },
      transform: function(data) {
        var exists;
        if (!(data instanceof Object)) {
          return data;
        }
        switch (false) {
          case !(data instanceof Array):
            exists = {};
            data.forEach((function(_this) {
              return function(item) {
                var key;
                if (!(item instanceof Object)) {
                  return;
                }
                key = item['@key'];
                if (!((key != null) && !!key)) {
                  _this.debug("no key?");
                  _this.debug(item);
                }
                if (exists[key]) {
                  throw _this.error("key conflict for " + key);
                }
                return exists[key] = true;
              };
            })(this));
            break;
          case !!data.hasOwnProperty('@key'):
            this.debug("defining a new @key property into list item");
            Object.defineProperty(data, '@key', {
              get: (function() {
                return (this.tag.map(function(k) {
                  return data[k];
                })).join('+');
              }).bind(this)
            });
        }
        return data;
      },
      predicate: function(data) {
        if (!(data instanceof Object)) {
          return;
        }
        if (data instanceof Array) {
          return;
        }
        return assert(this.tag.every(function(k) {
          return data.hasOwnProperty(k);
        }), "data must contain values for all key leafs");
      }
    }), new Extension('leaf', {
      argument: 'name',
      scope: {
        config: '0..1',
        "default": '0..1',
        description: '0..1',
        'if-feature': '0..n',
        mandatory: '0..1',
        must: '0..n',
        reference: '0..1',
        status: '0..1',
        type: '0..1',
        units: '0..1',
        when: '0..1'
      },
      resolve: function() {
        var ref1;
        if (((ref1 = this.mandatory) != null ? ref1.tag : void 0) === 'true' && (this["default"] != null)) {
          throw this.error("cannot define 'default' when 'mandatory' is true");
        }
      },
      predicate: function(data) {
        if (data instanceof Error) {
          return;
        }
        if (data instanceof Array) {
          return assert(data.length === 1 && data[0] === null, "data cannot be an Array");
        } else {
          return assert(!(data instanceof Object), "data cannot be an Object");
        }
      },
      transform: function(data, ctx) {
        var expr, i, len, ref1;
        ref1 = this.exprs;
        for (i = 0, len = ref1.length; i < len; i++) {
          expr = ref1[i];
          if (expr.kind !== 'type') {
            data = expr["eval"](data, ctx);
          }
        }
        this.debug("leaf had");
        this.debug(data);
        if (this.type != null) {
          data = this.type.apply(data, ctx);
        }
        this.debug("leaf has");
        this.debug(data);
        return data;
      },
      construct: function(data, ctx) {
        if (data == null) {
          data = {};
        }
        if (ctx == null) {
          ctx = {};
        }
        return (new Model.Property(this.datakey, this)).join(data, ctx.state);
      },
      compose: function(data, opts) {
        var ref1, type;
        if (opts == null) {
          opts = {};
        }
        if (data instanceof Array) {
          return;
        }
        if (data instanceof Object && Object.keys(data).length > 0) {
          return;
        }
        type = (ref1 = this.lookup('extension', 'type')) != null ? typeof ref1.compose === "function" ? ref1.compose(data) : void 0 : void 0;
        if (type == null) {
          return;
        }
        this.debug("detected '" + opts.tag + "' as " + (type != null ? type.tag : void 0));
        return (new Yang(this.tag, opts.tag, this))["extends"](type);
      }
    }), new Extension('leaf-list', {
      argument: 'name',
      scope: {
        config: '0..1',
        description: '0..1',
        'if-feature': '0..n',
        'max-elements': '0..1',
        'min-elements': '0..1',
        must: '0..n',
        'ordered-by': '0..1',
        reference: '0..1',
        status: '0..1',
        type: '0..1',
        units: '0..1',
        when: '0..1'
      },
      predicate: function(data) {
        if (data == null) {
          data = [];
        }
        return assert(data instanceof Array, "data must contain an Array");
      },
      transform: function(data, ctx) {
        var expr, i, j, key, l, len, len1, output, ref1, ref2, ref3, value;
        if (data == null) {
          data = [];
          ref1 = this.exprs;
          for (i = 0, len = ref1.length; i < len; i++) {
            expr = ref1[i];
            data = expr["eval"](data, ctx);
          }
          return void 0;
        }
        if (!(data instanceof Array)) {
          data = [data];
        }
        data = data.filter(Boolean);
        output = {};
        for (key = j = 0, ref2 = data.length; 0 <= ref2 ? j < ref2 : j > ref2; key = 0 <= ref2 ? ++j : --j) {
          output[data[key]] = data[key];
        }
        data = (function() {
          var results;
          results = [];
          for (key in output) {
            value = output[key];
            results.push(value);
          }
          return results;
        })();
        ref3 = this.exprs;
        for (l = 0, len1 = ref3.length; l < len1; l++) {
          expr = ref3[l];
          if (expr.kind !== 'type') {
            data = expr["eval"](data, ctx);
          }
        }
        if (this.type != null) {
          data = this.type.apply(data, ctx);
        }
        return data;
      },
      construct: function(data, ctx) {
        if (data == null) {
          data = {};
        }
        if (ctx == null) {
          ctx = {};
        }
        return (new Model.Property(this.datakey, this)).join(data, ctx.state);
      },
      compose: function(data, opts) {
        var i, item, len, res, type_, types;
        if (opts == null) {
          opts = {};
        }
        if (!(data instanceof Array)) {
          return;
        }
        type_ = this.lookup('extension', 'type');
        types = [];
        for (i = 0, len = data.length; i < len; i++) {
          item = data[i];
          res = typeof type_.compose === "function" ? type_.compose(item) : void 0;
          if (res == null) {
            return;
          }
          types.push(res);
        }
        return (new Yang(this.tag, opts.tag, this))["extends"](types[0]);
      }
    }), new Extension('length', {
      argument: 'value',
      scope: {
        description: '0..1',
        'error-app-tag': '0..1',
        'error-message': '0..1',
        reference: '0..1'
      }
    }), new Extension('list', {
      argument: 'name',
      scope: {
        action: '0..n',
        anydata: '0..n',
        anyxml: '0..n',
        choice: '0..n',
        config: '0..1',
        container: '0..n',
        description: '0..1',
        grouping: '0..n',
        'if-feature': '0..n',
        key: '0..1',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        'max-elements': '0..1',
        'min-elements': '0..1',
        must: '0..n',
        notification: '0..n',
        'ordered-by': '0..1',
        reference: '0..1',
        status: '0..1',
        typedef: '0..n',
        unique: '0..1',
        uses: '0..n',
        when: '0..1'
      },
      predicate: function(data) {
        if (data == null) {
          data = {};
        }
        return assert(data instanceof Object, "data must be an Object");
      },
      transform: function(data, ctx) {
        var attr, expr, i, j, l, len, len1, len2, len3, n, ref1, ref2, ref3, ref4;
        if (ctx == null) {
          ctx = {};
        }
        if (data == null) {
          data = [];
          ref1 = this.attrs;
          for (i = 0, len = ref1.length; i < len; i++) {
            expr = ref1[i];
            data = expr["eval"](data, ctx);
          }
          return void 0;
        }
        if (data instanceof Array) {
          data.forEach((function(_this) {
            return function(item, idx) {
              return (new Model.Property(idx, _this)).join(data, ctx.state);
            };
          })(this));
          ref2 = this.attrs;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            attr = ref2[j];
            data = attr["eval"](data, ctx);
          }
        } else {
          ref3 = this.nodes;
          for (l = 0, len2 = ref3.length; l < len2; l++) {
            expr = ref3[l];
            if (data != null) {
              data = expr["eval"](data, ctx);
            }
          }
          ref4 = this.attrs;
          for (n = 0, len3 = ref4.length; n < len3; n++) {
            expr = ref4[n];
            if (data != null) {
              data = expr["eval"](data, ctx);
            }
          }
        }
        return data;
      },
      construct: function(data, ctx) {
        if (data == null) {
          data = {};
        }
        if (ctx == null) {
          ctx = {};
        }
        return (new Model.Property(this.datakey, this)).join(data, ctx.state);
      },
      compose: function(data, opts) {
        var expr, i, k, kind, len, match, matches, parents, possibilities, ref1, ref2, v;
        if (opts == null) {
          opts = {};
        }
        if (!(data instanceof Array && data.length > 0)) {
          return;
        }
        if (!data.every(function(x) {
          return typeof x === 'object';
        })) {
          return;
        }
        data = data[0];
        possibilities = (function() {
          var ref1, results;
          ref1 = this.scope;
          results = [];
          for (kind in ref1) {
            if (!hasProp.call(ref1, kind)) continue;
            results.push(this.lookup('extension', kind));
          }
          return results;
        }).call(this);
        matches = [];
        parents = (ref1 = opts.parents) != null ? ref1 : [];
        parents.push(data);
        for (k in data) {
          if (!hasProp.call(data, k)) continue;
          v = data[k];
          if (indexOf.call(parents, v) >= 0) {
            this.debug("found circular entry for '" + k + "'");
            matches.push(Yang("anydata " + k + ";"));
            continue;
          }
          for (i = 0, len = possibilities.length; i < len; i++) {
            expr = possibilities[i];
            if (!(expr != null)) {
              continue;
            }
            match = typeof expr.compose === "function" ? expr.compose(v, {
              tag: k,
              parents: parents
            }) : void 0;
            if (match != null) {
              break;
            }
          }
          if (match == null) {
            return;
          }
          matches.push(match);
        }
        parents.pop();
        return (ref2 = new Yang(this.tag, opts.tag, this))["extends"].apply(ref2, matches);
      }
    }), new Extension('mandatory', {
      argument: 'value',
      resolve: function() {
        return this.tag = this.tag === true || this.tag === 'true';
      },
      predicate: function(data) {
        return assert(this.tag !== true || (data != null) || (this.parent.binding != null), "data must be defined");
      }
    }), new Extension('max-elements', {
      argument: 'value',
      resolve: function() {
        if (this.tag !== 'unbounded') {
          return this.tag = Number(this.tag);
        }
      },
      predicate: function(data) {
        return assert(this.tag === 'unbounded' || !(data instanceof Array) || data.length <= this.tag, "data must contain less than maximum entries");
      }
    }), new Extension('min-elements', {
      argument: 'value',
      resolve: function() {
        return this.tag = Number(this.tag);
      },
      predicate: function(data) {
        return assert(!(data instanceof Array) || data.length >= this.tag, "data must contain more than minimum entries");
      }
    }), new Extension('modifier', {
      argument: 'value',
      resolve: function() {
        return this.tag = this.tag === 'invert-match';
      }
    }), new Extension('module', {
      argument: 'name',
      scope: {
        anydata: '0..n',
        anyxml: '0..n',
        augment: '0..n',
        choice: '0..n',
        contact: '0..1',
        container: '0..n',
        description: '0..1',
        deviation: '0..n',
        extension: '0..n',
        feature: '0..n',
        grouping: '0..n',
        identity: '0..n',
        "import": '0..n',
        include: '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        namespace: '0..1',
        notification: '0..n',
        organization: '0..1',
        prefix: '0..1',
        reference: '0..1',
        revision: '0..n',
        rpc: '0..n',
        typedef: '0..n',
        uses: '0..n',
        'yang-version': '0..1'
      },
      resolve: function() {
        var ref1, ref2;
        if (((ref1 = this['yang-version']) != null ? ref1.tag : void 0) === '1.1') {
          if (!((this.namespace != null) && (this.prefix != null))) {
            throw this.error("must define 'namespace' and 'prefix' for YANG 1.1 compliance");
          }
        }
        if (((ref2 = this.extension) != null ? ref2.length : void 0) > 0) {
          return this.debug("found " + this.extension.length + " new extension(s)");
        }
      },
      construct: function(data) {
        if (data == null) {
          data = {};
        }
        return (new Model(this.tag, this)).set(data);
      }
    }), new Extension('must', {
      argument: 'condition',
      scope: {
        description: '0..1',
        'error-app-tag': '0..1',
        'error-message': '0..1',
        reference: '0..1'
      }
    }), new Extension('namespace', {
      argument: 'uri'
    }), new Extension('notification', {
      argument: 'event',
      scope: {
        anydata: '0..n',
        anyxml: '0..n',
        choice: '0..n',
        container: '0..n',
        description: '0..1',
        grouping: '0..n',
        'if-feature': '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        reference: '0..1',
        status: '0..1',
        typedef: '0..n',
        uses: '0..n'
      },
      transform: function(data) {
        return data;
      }
    }), new Extension('ordered-by', {
      argument: 'value'
    }), new Extension('organization', {
      argument: 'text',
      yin: true
    }), new Extension('output', {
      scope: {
        anydata: '0..n',
        anyxml: '0..n',
        choice: '0..n',
        container: '0..n',
        grouping: '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        typedef: '0..n',
        uses: '0..n'
      },
      transform: function(data, ctx) {
        var cxt, expr, i, len, ref1;
        if (data instanceof Promise) {
          return data;
        }
        cxt = ctx["with"]({
          force: true
        });
        ref1 = this.exprs;
        for (i = 0, len = ref1.length; i < len; i++) {
          expr = ref1[i];
          if (data != null) {
            data = expr["eval"](data, ctx);
          }
        }
        return data;
      },
      construct: function(data, ctx) {
        if (data == null) {
          data = {};
        }
        if (ctx == null) {
          ctx = {};
        }
        return (new Model.Property(this.kind, this)).join(data, ctx.state);
      }
    }), new Extension('path', {
      argument: 'value',
      resolve: function() {
        return this.tag = this.normalizePath(this.tag);
      }
    }), new Extension('pattern', {
      argument: 'value',
      scope: {
        description: '0..1',
        'error-app-tag': '0..1',
        'error-message': '0..1',
        modifier: '0..1',
        reference: '0..1'
      },
      resolve: function() {
        return this.tag = new RegExp(this.tag);
      }
    }), new Extension('position', {
      argument: 'value'
    }), new Extension('prefix', {
      argument: 'value',
      resolve: function() {}
    }), new Extension('presence', {
      argument: 'value'
    }), new Extension('range', {
      argument: 'value',
      scope: {
        description: '0..1',
        'error-app-tag': '0..1',
        'error-message': '0..1',
        reference: '0..1'
      }
    }), new Extension('reference', {
      argument: 'value'
    }), new Extension('refine', {
      argument: 'target-node',
      scope: {
        "default": '0..1',
        description: '0..1',
        reference: '0..1',
        config: '0..1',
        'if-feature': '0..n',
        mandatory: '0..1',
        presence: '0..1',
        must: '0..n',
        'min-elements': '0..1',
        'max-elements': '0..1',
        units: '0..1'
      },
      resolve: function() {
        var target;
        target = this.parent.state.grouping.locate(this.tag);
        if (target == null) {
          console.warn(this.error("unable to locate '" + this.tag + "'"));
          return;
        }
        this.debug("APPLY " + this + " to " + target);
        return this.exprs.forEach(function(expr) {
          var ref1;
          switch (false) {
            case !target.hasOwnProperty(expr.kind):
              if ((ref1 = expr.kind) === 'must' || ref1 === 'if-feature') {
                return target["extends"](expr);
              } else {
                return target[expr.kind] = expr;
              }
              break;
            default:
              return target["extends"](expr);
          }
        });
      }
    }), new Extension('require-instance', {
      argument: 'value',
      resolve: function() {
        return this.tag = this.tag === true || this.tag === 'true';
      }
    }), new Extension('revision', {
      argument: 'date',
      scope: {
        description: '0..1',
        reference: '0..1',
        status: '0..1'
      }
    }), new Extension('revision-date', {
      argument: 'date'
    }), new Extension('rpc', {
      argument: 'name',
      scope: {
        description: '0..1',
        grouping: '0..n',
        'if-feature': '0..n',
        input: '0..1',
        output: '0..1',
        reference: '0..1',
        status: '0..1',
        typedef: '0..n'
      },
      predicate: function(data) {
        if (data == null) {
          data = function() {};
        }
        return assert(data instanceof Function, "data must be a Funcion");
      },
      transform: function(data) {
        var attr, i, len, ref1, ref2;
        if (data == null) {
          data = (ref1 = this.binding) != null ? ref1 : function() {
            throw new Error("missing function binding for " + this.path);
          };
        }
        if (!(data instanceof Function)) {
          this.debug(data);
          throw this.error("expected a function but got a '" + (typeof data) + "'");
        }
        ref2 = this.attrs;
        for (i = 0, len = ref2.length; i < len; i++) {
          attr = ref2[i];
          data = attr["eval"](data);
        }
        return data;
      },
      construct: function(data) {
        if (data == null) {
          data = {};
        }
        return (new Model.Property(this.datakey, this)).join(data);
      }
    }), new Extension('status', {
      argument: 'value',
      resolve: function() {
        var ref1;
        return this.tag = (ref1 = this.tag) != null ? ref1 : 'current';
      }
    }), new Extension('submodule', {
      argument: 'name',
      scope: {
        anyxml: '0..n',
        augment: '0..n',
        'belongs-to': '0..1',
        choice: '0..n',
        contact: '0..1',
        container: '0..n',
        description: '0..1',
        deviation: '0..n',
        extension: '0..n',
        feature: '0..n',
        grouping: '0..n',
        identity: '0..n',
        "import": '0..n',
        include: '0..n',
        leaf: '0..n',
        'leaf-list': '0..n',
        list: '0..n',
        notification: '0..n',
        organization: '0..1',
        reference: '0..1',
        revision: '0..n',
        rpc: '0..n',
        typedef: '0..n',
        uses: '0..n',
        'yang-version': '0..1'
      }
    }), new Extension('type', {
      argument: 'name',
      scope: {
        base: '0..1',
        bit: '0..n',
        "enum": '0..n',
        'fraction-digits': '0..1',
        length: '0..1',
        path: '0..1',
        pattern: '0..n',
        range: '0..1',
        'require-instance': '0..1',
        type: '0..n'
      },
      resolve: function() {
        var convert, typedef;
        if ((this.type != null) && this.tag !== 'union') {
          throw this.error("cannot have additional type definitions unless 'union'");
        }
        typedef = this.lookup('typedef', this.tag);
        if (typedef == null) {
          this.debug(this.parent);
          throw this.error("unable to resolve typedef for " + this.tag);
        }
        if (typedef.type != null) {
          this.once('compile:after', (function(_this) {
            return function() {
              var expr, i, len, ref1, results;
              ref1 = typedef.type.exprs;
              results = [];
              for (i = 0, len = ref1.length; i < len; i++) {
                expr = ref1[i];
                try {
                  results.push(_this.merge(expr));
                } catch (error) {}
              }
              return results;
            };
          })(this));
          this.primitive = typedef.type.primitive;
        } else {
          this.primitive = this.tag;
        }
        convert = typedef.convert;
        if (convert == null) {
          convert = typedef.compile().convert;
          if (convert == null) {
            throw this.error("no convert found for " + typedef.tag);
          }
        }
        this.convert = convert.bind(this);
        if ((this.parent != null) && this.parent.kind !== 'type') {
          try {
            return this.parent["extends"](typedef["default"], typedef.units);
          } catch (error) {}
        }
      },
      transform: function(data, ctx) {
        var res;
        if (!(data !== void 0 && (data instanceof Array || !(data instanceof Object)))) {
          return data;
        }
        if (data instanceof Array) {
          res = data.map((function(_this) {
            return function(x) {
              return _this.convert(x, ctx);
            };
          })(this));
          if (ctx.state.suppress && res.some(function(x) {
            return x instanceof Error;
          })) {
            ctx.defer(data);
          }
        } else {
          res = this.convert(data, ctx);
          if (ctx.state.suppress && res instanceof Error) {
            ctx.defer(data);
          }
        }
        return res;
      },
      compose: function(data, opts) {
        var e, i, len, ref1, typedef, typedefs;
        if (opts == null) {
          opts = {};
        }
        if (data instanceof Function) {
          return;
        }
        typedefs = this.lookup('typedef');
        ref1 = typedefs.concat({
          tag: 'unknown'
        });
        for (i = 0, len = ref1.length; i < len; i++) {
          typedef = ref1[i];
          this.debug("checking if " + typedef.tag);
          try {
            if ((typedef.convert(data)) !== void 0) {
              break;
            }
          } catch (error) {
            e = error;
            this.debug(e.message);
          }
        }
        if (typedef.tag === 'unknown') {
          return;
        }
        return new Yang(this.tag, typedef.tag);
      }
    }), new Extension('typedef', {
      argument: 'name',
      scope: {
        "default": '0..1',
        description: '0..1',
        units: '0..1',
        type: '0..1',
        reference: '0..1',
        status: '0..1'
      },
      resolve: function() {
        var builtin;
        if (this.type != null) {
          this.convert = this.type.compile().convert;
          return;
        }
        builtin = this.lookup('typedef', this.tag);
        if (builtin == null) {
          throw this.error("unable to resolve '" + this.tag + "' built-in type");
        }
        return this.convert = builtin.convert;
      }
    }), new Extension('unique', {
      argument: 'tag',
      resolve: function() {
        this.tag = this.tag.split(' ');
        if (!(this.tag.every((function(_this) {
          return function(k) {
            return _this.parent.match('leaf', k) != null;
          };
        })(this)))) {
          throw this.error("referenced unique items do not have leaf elements");
        }
      },
      predicate: function(data) {
        var isUnique, seen;
        if (!(data instanceof Array)) {
          return;
        }
        seen = {};
        isUnique = data.every((function(_this) {
          return function(item) {
            var key;
            if (!_this.tag.every(function(k) {
              return item[k] != null;
            })) {
              return true;
            }
            key = _this.tag.reduce((function(a, b) {
              return a += item[b];
            }), '');
            if (seen[key]) {
              return false;
            }
            seen[key] = true;
            return true;
          };
        })(this));
        return assert(isUnique, "data must contain unique entries of " + this.tag);
      }
    }), new Extension('units', {
      argument: 'value'
    }), new Extension('uses', {
      argument: 'grouping-name',
      scope: {
        augment: '0..n',
        description: '0..1',
        'if-feature': '0..n',
        refine: '0..n',
        reference: '0..1',
        status: '0..1',
        when: '0..1'
      },
      resolve: function() {
        var grouping, ref;
        grouping = this.lookup('grouping', this.tag);
        if (grouping == null) {
          throw this.error("unable to resolve " + this.tag + " grouping definition");
        }
        if (this.when == null) {
          ref = this.state.grouping = grouping.clone().compile();
          this.debug("extending with " + ref.nodes.length + " elements");
          return this.parent["extends"](ref.nodes);
        } else {
          return this.parent.on('apply:after', (function(_this) {
            return function(data) {
              var expr, i, len, ref1, results;
              if (data != null) {
                ref1 = _this.exprs;
                results = [];
                for (i = 0, len = ref1.length; i < len; i++) {
                  expr = ref1[i];
                  results.push(data = expr.apply(data));
                }
                return results;
              }
            };
          })(this));
        }
      },
      transform: function(data) {
        return data;
      }
    }), new Extension('value', {
      argument: 'value'
    }), new Extension('when', {
      argument: 'condition',
      scope: {
        description: '0..1',
        reference: '0..1'
      }
    }), new Extension('yang-version', {
      argument: 'value'
    }), new Extension('yin-element', {
      argument: 'value'
    })
  ];

}).call(this);

},{"../extension":5,"../model":9,"../xpath":12,"../yang":13,"assert":16}],8:[function(require,module,exports){
(function (Buffer){
// Generated by CoffeeScript 1.12.2
(function() {
  var Integer, Typedef,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Typedef = require('../typedef');

  Integer = (function(superClass) {
    extend(Integer, superClass);

    function Integer(name, range) {
      Integer.__super__.constructor.call(this, name, {
        construct: function(value) {
          var ranges, ref, tests;
          if ((Number.isNaN(Number(value))) || ((Number(value)) % 1) !== 0) {
            throw new Error("[" + this.tag + "] unable to convert '" + value + "'");
          }
          if (typeof value === 'string' && !value) {
            throw new Error("[" + this.tag + "] unable to convert '" + value + "'");
          }
          value = Number(value);
          ranges = (ref = this.range) != null ? ref.tag.split('|') : void 0;
          if (ranges == null) {
            ranges = [range];
          }
          tests = ranges.map(function(e) {
            var max, min, ref1;
            ref1 = e.split(/\s*\.\.\s*/), min = ref1[0], max = ref1[1];
            min = Number(min);
            max = (function() {
              switch (false) {
                case max !== 'max':
                  return null;
                default:
                  return Number(max);
              }
            })();
            return function(v) {
              return ((min == null) || v >= min) && ((max == null) || v <= max);
            };
          });
          if (!((tests == null) || tests.some(function(test) {
            return typeof test === "function" ? test(value) : void 0;
          }))) {
            throw new Error("[" + this.tag + "] range violation for '" + value + "' on " + ranges);
          }
          return value;
        }
      });
    }

    return Integer;

  })(Typedef);

  module.exports = [
    new Typedef('boolean', {
      construct: function(value) {
        switch (false) {
          case typeof value !== 'string':
            if (value !== 'true' && value !== 'false') {
              throw new Error("[" + this.tag + "] " + value + " must be 'true' or 'false'");
            }
            return value === 'true';
          case typeof value !== 'boolean':
            return value;
          default:
            throw new Error("[" + this.tag + "] unable to convert '" + value + "'");
        }
      }
    }), new Typedef('empty', {
      construct: function(value) {
        this.debug("convert");
        this.debug(value);
        if (value !== null) {
          throw new Error("[" + this.tag + "] cannot contain value other than null");
        }
        return null;
      }
    }), new Typedef('binary', {
      construct: function(value) {
        if (!(value instanceof Buffer)) {
          throw new Error("[" + this.tag + "] unable to convert '" + value + "'");
        }
        return value;
      }
    }), new Integer('int8', '-128..127'), new Integer('int16', '-32768..32767'), new Integer('int32', '-2147483648..2147483647'), new Integer('int64', '-9223372036854775808..9223372036854775807'), new Integer('uint8', '0..255'), new Integer('uint16', '0..65535'), new Integer('uint32', '0..4294967295'), new Integer('uint64', '0..18446744073709551615'), new Typedef('decimal64', {
      construct: function(value) {
        if (Number.isNaN(Number(value))) {
          throw new Error("[" + this.tag + "] unable to convert '" + value + "'");
        }
        if (typeof value === 'string' && !value) {
          throw new Error("[" + this.tag + "] unable to convert '" + value + "'");
        }
        switch (false) {
          case typeof value !== 'string':
            return Number(value);
          case typeof value !== 'number':
            return value;
          default:
            throw new Error("[" + this.tag + "] type violation for " + value);
        }
      }
    }), new Typedef('string', {
      construct: function(value) {
        var lengths, patterns, ref, ref1, tests, type;
        patterns = (ref = this.pattern) != null ? ref.map(function(x) {
          return x.tag;
        }) : void 0;
        lengths = (ref1 = this.length) != null ? ref1.tag.split('|') : void 0;
        tests = lengths != null ? lengths.map(function(e) {
          var max, min, ref2;
          ref2 = e.split(/\s*\.\.\s*/), min = ref2[0], max = ref2[1];
          min = Number(min);
          max = (function() {
            switch (false) {
              case !(max == null):
                return min;
              case max !== 'max':
                return null;
              default:
                return Number(max);
            }
          })();
          return function(v) {
            return ((min == null) || v.length >= min) && ((max == null) || v.length <= max);
          };
        }) : void 0;
        type = typeof value;
        value = String(value);
        if (type === 'object' && /^\[object/.test(value)) {
          throw new Error("[" + this.tag + "] unable to convert '" + value + "' into string");
        }
        if (!((tests == null) || tests.some(function(test) {
          return typeof test === "function" ? test(value) : void 0;
        }))) {
          throw new Error("[" + this.tag + "] length violation for '" + value + "' on " + lengths);
        }
        if (!((patterns == null) || patterns.every(function(regex) {
          return regex.test(value);
        }))) {
          throw new Error("[" + this.tag + "] pattern violation for '" + value + "'");
        }
        return value;
      }
    }), new Typedef('union', {
      construct: function(value) {
        var j, len, ref, type;
        if (this.type == null) {
          throw new Error("[" + this.tag + "] must contain one or more type definitions");
        }
        ref = this.type;
        for (j = 0, len = ref.length; j < len; j++) {
          type = ref[j];
          try {
            return type.convert(value);
          } catch (error) {
            continue;
          }
        }
        throw new Error("[" + this.tag + "] unable to find matching type for '" + value + "' within: " + this.type);
      }
    }), new Typedef('enumeration', {
      construct: function(value) {
        var i, j, len, ref, ref1;
        if (!(((ref = this["enum"]) != null ? ref.length : void 0) > 0)) {
          throw new Error("[" + this.tag + "] must have one or more 'enum' definitions");
        }
        ref1 = this["enum"];
        for (j = 0, len = ref1.length; j < len; j++) {
          i = ref1[j];
          if (value === i.tag) {
            return i.tag;
          }
          if (value === i.value.tag) {
            return i.tag;
          }
          if (("" + value) === i.value.tag) {
            return i.tag;
          }
        }
        throw new Error("[" + this.tag + "] type violation for '" + value + "' on " + (this["enum"].map(function(x) {
          return x.tag;
        })));
      }
    }), new Typedef('identityref', {
      construct: function(value, ctx) {
        var dep, imports, j, k, len, len1, m, match, modules, ref;
        if (!((this.base != null) && typeof this.base.tag === 'string')) {
          throw new Error("[" + this.tag + "] must reference 'base' identity");
        }
        return value;
        match = this.lookup('identity', value);
        if (match == null) {
          imports = (ref = this.lookup('import')) != null ? ref : [];
          for (j = 0, len = imports.length; j < len; j++) {
            dep = imports[j];
            match = dep.module.lookup('identity', value);
            if (match != null) {
              break;
            }
          }
          if (match == null) {
            modules = this.lookup('module');
            this.debug("fallback searching all modules " + (modules.map(function(x) {
              return x.tag;
            })));
            for (k = 0, len1 = modules.length; k < len1; k++) {
              m = modules[k];
              match = m.lookup('identity', value);
              if (match != null) {
                break;
              }
            }
          }
        }
        if ((match != null ? match.base : void 0) != null) {
          match = match.base.state.identity;
        }
        this.debug("base: " + this.base + " match: " + match + " value: " + value);
        if (!((match != null) && this.base.state.identity === match)) {
          ctx["throw"]("[" + this.tag + "] identityref is invalid for '" + value + "'");
        }
        return value;
      }
    }), new Typedef('instance-identifier', {
      construct: function(value, ctx) {
        var e, err, prop, ref;
        this.debug("processing instance-identifier with " + value);
        try {
          prop = ctx["in"](value);
          if (prop.config !== ((ref = this['require-instance']) != null ? ref.tag : void 0)) {
            ctx["throw"]("not a configuration node");
          }
        } catch (error) {
          e = error;
          err = new Error("[" + this.tag + "] " + ctx.name + " is invalid for '" + value + "' (not found in " + value + ")");
          err['error-tag'] = 'data-missing';
          err['error-app-tag'] = 'instance-required';
          err['err-path'] = value;
          if (!ctx.state.suppress) {
            ctx["throw"](err);
          }
          return err;
        }
        return value;
      }
    }), new Typedef('leafref', {
      construct: function(value, ctx) {
        var err, res, valid;
        if (this.path == null) {
          throw new Error("[" + this.tag + "] must contain 'path' statement");
        }
        this.debug("processing leafref with " + this.path.tag);
        res = ctx.get(this.path.tag);
        this.debug("got back " + res);
        valid = (function() {
          switch (false) {
            case !(res instanceof Array):
              return indexOf.call(res, value) >= 0;
            default:
              return res === value;
          }
        })();
        if (valid !== true) {
          this.debug("invalid leafref '" + value + "' detected for " + this.path.tag);
          this.debug(ctx.state);
          err = new Error("[" + this.tag + "] " + ctx.name + " is invalid for '" + value + "' (not found in " + this.path.tag + ")");
          err['error-tag'] = 'data-missing';
          err['error-app-tag'] = 'instance-required';
          err['err-path'] = this.path.tag;
          if (!ctx.state.suppress) {
            ctx["throw"](err);
          }
          return err;
        }
        return value;
      }
    })
  ];

}).call(this);

}).call(this,require("buffer").Buffer)
},{"../typedef":11,"buffer":17}],9:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var Emitter, Model, Property, Stack, XPath, debug, delegate,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:model');
  }

  delegate = require('delegates');

  Stack = require('stacktrace-parser');

  Emitter = require('events').EventEmitter;

  Property = require('./property');

  XPath = require('./xpath');

  Model = (function(superClass) {
    var enqueue;

    extend(Model, superClass);

    Model.Store = {};

    Model.Property = Property;

    function Model() {
      if (!(this instanceof Model)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Model, arguments, function(){});
      }
      Model.__super__.constructor.apply(this, arguments);
      this.state.transactable = false;
      this.state.maxTransactions = 100;
      this.state.queue = [];
      this.state.engine = new Emitter;
      this.state.engine.__ = this;
      this.schema.on('change', (function(_this) {
        return function(elem) {
          var props;
          if (typeof debug === "function") {
            debug("[" + _this.name + ":adaptive] detected schema change at " + elem.datapath);
          }
          try {
            props = _this.find(elem.datapath);
          } catch (error) {
            props = [];
          }
          return props.forEach(function(prop) {
            return prop.set(prop.content, {
              force: true
            });
          });
        };
      })(this));
      this.join(Model.Store, {
        replace: true
      });
      if (typeof debug === "function") {
        debug("created a new YANG Model: " + this.name);
      }
    }

    delegate(Model.prototype, 'state').access('engine').getter('queue');

    enqueue = function(prop) {
      if (this.queue.length > this.maxTransactions) {
        throw this.error("exceeded max transaction queue of " + this.maxTransactions + ", forgot to save()?");
      }
      return this.queue.push({
        target: prop,
        value: prop.state.prev
      });
    };

    Model.property('transactable', {
      enumerable: true,
      get: function() {
        return this.state.transactable;
      },
      set: function(toggle) {
        if (toggle === this.state.transactable) {
          return;
        }
        if (toggle === true) {
          this.state.on('update', enqueue);
        } else {
          this.state.removeListener('update', enqueue);
          this.state.queue.splice(0, this.state.queue.length);
        }
        return this.state.transactable = toggle;
      }
    });

    Model.prototype.access = function(model) {
      var e;
      try {
        return Model.Store[model].__;
      } catch (error) {
        e = error;
        throw this.error("unable to locate '" + model + "' instance in the Store");
      }
    };

    Model.prototype.enable = function(feature, controller) {
      if (controller != null) {
        this.engine[feature] = controller;
      }
      if (!this.engine.hasOwnProperty(feature)) {
        throw this.error("unable to enable unknown feature '" + feature + "'");
      }
      this.engine.emit("enable:" + feature, this.engine[feature]);
      return this;
    };

    Model.prototype.save = function() {
      if (typeof debug === "function") {
        debug("[save] trigger commit and clear queue");
      }
      this.emit('commit', this.state.queue.slice());
      this.state.queue.splice(0, this.state.queue.length);
      return this;
    };

    Model.prototype.rollback = function() {
      var change;
      while (change = this.state.queue.pop()) {
        change.target.set(change.value, {
          suppress: true
        });
      }
      return this;
    };

    Model.prototype.on = function() {
      var $$$, callback, ctx, event, filters, j, recursive;
      event = arguments[0], filters = 3 <= arguments.length ? slice.call(arguments, 1, j = arguments.length - 1) : (j = 1, []), callback = arguments[j++];
      if (!(callback instanceof Function)) {
        throw new Error("must supply callback function to listen for events");
      }
      recursive = function(name) {
        var callee, column, file, frame, frames, i, l, len, lineNumber, ref, seen;
        seen = {};
        frames = Stack.parse(new Error().stack);
        for (i = l = 0, len = frames.length; l < len; i = ++l) {
          frame = frames[i];
          if (!(~frame.methodName.indexOf(name))) {
            continue;
          }
          ref = frames[i - 1], file = ref.file, lineNumber = ref.lineNumber, column = ref.column;
          callee = file + ":" + lineNumber + ":" + column;
          if (seen[callee] == null) {
            seen[callee] = 0;
          }
          if (++seen[callee] > 1) {
            console.warn("detected recursion for '" + callee + "'");
            return true;
          }
        }
        return false;
      };
      ctx = this.context;
      $$$ = function() {
        var args, prop, ref;
        prop = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (typeof debug === "function") {
          debug("$$$: check if '" + prop.path + "' in '" + filters + "'");
        }
        if (!filters.length || (ref = prop.path).contains.apply(ref, filters)) {
          if (!recursive('$$$')) {
            return callback.apply(ctx, [prop].concat(args));
          }
        }
      };
      return this.state.on(event, $$$);
    };

    Model.prototype.toJSON = function() {
      return Model.__super__.toJSON.call(this, false);
    };

    Model.prototype.set = function(value, opts) {
      var copy, k, v;
      if (value == null) {
        value = {};
      }
      copy = {};
      for (k in value) {
        if (!hasProp.call(value, k)) continue;
        v = value[k];
        copy[k] = v;
      }
      return Model.__super__.set.call(this, copy, opts);
    };

    Model.prototype.find = function(pattern, opts) {
      var e, match, target, xpath;
      if (pattern == null) {
        pattern = '.';
      }
      if (opts == null) {
        opts = {};
      }
      if (this.container == null) {
        return Model.__super__.find.apply(this, arguments);
      }
      if (typeof debug === "function") {
        debug("[" + this.name + ":find] match " + pattern + " (root: " + opts.root + ")");
      }
      try {
        match = Model.__super__.find.call(this, pattern, {
          root: true
        });
      } catch (error) {
        e = error;
        match = [];
      }
      if (match.length || opts.root) {
        return match;
      }
      xpath = (function() {
        switch (false) {
          case !(pattern instanceof XPath):
            return pattern;
          default:
            return XPath.parse(pattern, this.schema);
        }
      }).call(this);
      target = xpath.xpath.tag.split(':')[0];
      if (target === this.name) {
        return [];
      }
      if (typeof debug === "function") {
        debug("[" + this.name + ":find] locate " + target + " and apply " + xpath);
      }
      opts.root = true;
      try {
        return this.access(target).find(xpath, opts);
      } catch (error) {}
      try {
        return this.schema.lookup('module', target)["eval"](this.content).find(xpath, opts);
      } catch (error) {}
      return [];
    };

    Model.prototype["do"] = function() {
      var args, path, target;
      path = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      target = this["in"](path);
      if (target == null) {
        throw this.error("cannot invoke on '" + path + "', not found");
      }
      return target["do"].apply(target, args);
    };

    return Model;

  })(Property);

  module.exports = Model;

}).call(this);

}).call(this,require('_process'))
},{"./property":10,"./xpath":12,"_process":30,"debug":21,"delegates":23,"events":24,"stacktrace-parser":35}],10:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var Emitter, Property, XPath, clone, co, context, debug, delegate,
    hasProp = {}.hasOwnProperty;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:property');
  }

  co = require('co');

  delegate = require('delegates');

  clone = require('clone');

  Emitter = require('events').EventEmitter;

  context = require('./context');

  XPath = require('./xpath');

  Property = (function() {
    Property.property = function(prop, desc) {
      return Object.defineProperty(this.prototype, prop, desc);
    };

    function Property(name1, schema) {
      var base, ref;
      this.name = name1;
      this.schema = schema != null ? schema : {};
      if (!(this instanceof Property)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Property, arguments, function(){});
      }
      this.state = {
        value: null,
        container: null,
        configurable: true,
        enumerable: this.binding != null,
        mutable: ((ref = this.schema.config) != null ? ref.valueOf() : void 0) !== false
      };
      Object.setPrototypeOf(this.state, Emitter.prototype);
      if ((base = this.schema).kind == null) {
        base.kind = 'anydata';
      }
      this.set = this.set.bind(this);
      this.get = this.get.bind(this);
      Object.preventExtensions(this);
    }

    delegate(Property.prototype, 'state').method('once').method('on').access('container').getter('configurable').getter('enumerable').getter('mutable');

    delegate(Property.prototype, 'schema').getter('kind').getter('type').getter('binding');

    Property.property('content', {
      get: function() {
        return this.state.value;
      },
      set: function(value) {
        return this.set(value, {
          force: true
        });
      }
    });

    Property.property('context', {
      get: function() {
        var ctx;
        ctx = Object.create(context);
        ctx.state = {};
        ctx.property = this;
        Object.preventExtensions(ctx);
        return ctx;
      }
    });

    Property.property('parent', {
      get: function() {
        var ref;
        return (ref = this.container) != null ? ref.__ : void 0;
      }
    });

    Property.property('root', {
      get: function() {
        var root;
        if (this.kind === 'module') {
          return this;
        }
        root = (function() {
          switch (false) {
            case this.parent !== this:
              return this;
            case !(this.parent instanceof Property):
              return this.parent.root;
            default:
              return this;
          }
        }).call(this);
        if (this.state.root !== root) {
          this.state.path = void 0;
        }
        return this.state.root = root;
      }
    });

    Property.property('props', {
      get: function() {
        var k, prop, ref, ref1, results;
        ref1 = (ref = this.content) != null ? ref.__props__ : void 0;
        results = [];
        for (k in ref1) {
          prop = ref1[k];
          results.push(prop);
        }
        return results;
      }
    });

    Property.property('key', {
      get: function() {
        var idx, item, ref, ref1;
        if (this.schema !== ((ref = this.parent) != null ? ref.schema : void 0)) {
          return;
        }
        switch (false) {
          case this.content instanceof Object:
            return this.name + 1;
          case !this.content.hasOwnProperty('@key'):
            return this.content['@key'];
          case !Array.isArray(this.container):
            ref1 = this.container;
            for (idx in ref1) {
              item = ref1[idx];
              if (!(item === this.content)) {
                continue;
              }
              if (!(Number.isNaN(Number(idx)))) {
                idx = Number(idx);
              }
              return idx + 1;
            }
            return void 0;
        }
      }
    });

    Property.property('path', {
      get: function() {
        var entity, key;
        if (this === this.root) {
          entity = (function() {
            switch (false) {
              case this.kind !== 'module':
                return '/';
              default:
                return '.';
            }
          }).call(this);
          return XPath.parse(entity, this.schema);
        }
        key = this.key;
        if ((this.state.path != null) && (key == null)) {
          return this.state.path;
        }
        this.debug("[path] " + this.kind + "(" + this.name + ") has " + key + " " + (typeof key));
        entity = (function() {
          switch (typeof key) {
            case 'number':
              return ".[" + key + "]";
            case 'string':
              return ".[key('" + key + "')]";
            default:
              switch (false) {
                case this.kind !== 'list':
                  return this.schema.datakey;
                default:
                  return this.name;
              }
          }
        }).call(this);
        this.debug("[path] " + this.parent.name + " + " + entity);
        return this.state.path = this.parent.path.clone().append(entity);
      }
    });

    Property.prototype.clone = function() {
      var copy, k, ref, v;
      this.debug("[clone] cloning with " + this.props.length + " properties");
      copy = new this.constructor(this.name, this.schema);
      ref = this.state;
      for (k in ref) {
        v = ref[k];
        copy.state[k] = v;
      }
      return copy;
    };

    Property.prototype.emit = function(event) {
      var ref, ref1;
      (ref = this.state).emit.apply(ref, arguments);
      if (this !== this.root) {
        this.debug("[emit] '" + event + "' to '" + this.root.name + "'");
        return (ref1 = this.root).emit.apply(ref1, arguments);
      }
    };

    Property.prototype.join = function(obj, opts) {
      var detached, exists;
      if (opts == null) {
        opts = {
          replace: false,
          suppress: false,
          force: false
        };
      }
      if (!(obj instanceof Object)) {
        return obj;
      }
      if (this.container == null) {
        detached = true;
      }
      this.container = obj;
      if (Array.isArray(obj) && Array.isArray(this.content)) {
        this.debug(this.content);
        throw this.error("cannot join array property into list container");
      }
      if (this.kind === 'list' && !Array.isArray(obj) && (this.content != null) && !Array.isArray(this.content)) {
        throw this.error("cannot join non-list array property into containing object");
      }
      exists = obj[this.name];
      if (detached && opts.replace !== true) {
        opts.suppress = true;
        this.set(exists, opts);
      }
      Object.defineProperty(obj, this.name, this);
      if (!obj.hasOwnProperty('__props__')) {
        Object.defineProperty(obj, '__props__', {
          value: {}
        });
      }
      obj.__props__[this.name] = this;
      this.debug("[join] attached into " + obj.constructor.name + " container");
      return obj;
    };

    Property.prototype.get = function(pattern, prop) {
      var e, match, ref;
      if (prop == null) {
        prop = false;
      }
      switch (false) {
        case !((pattern != null) && prop):
          return this["in"](pattern);
        case pattern == null:
          match = this.find(pattern);
          switch (false) {
            case match.length !== 1:
              return match[0].content;
            case !(match.length > 1):
              return match.map(function(x) {
                return x.content;
              });
            default:
              return void 0;
          }
          break;
        case (ref = this.kind) !== 'rpc' && ref !== 'action':
          switch (false) {
            case this.binding == null:
              return this["do"].bind(this);
            default:
              return this.content;
          }
          break;
        default:
          try {
            if ((this.binding != null) && !(this.kind === 'list' && (this.key != null))) {
              this.binding.call(this.context);
            }
          } catch (error) {
            e = error;
            throw this.error("issue executing registered function binding during get()", e);
          }
          return this.content;
      }
    };

    Property.prototype.set = function(value, opts) {
      var desc, e, k, ref, ref1;
      if (opts == null) {
        opts = {
          force: false,
          suppress: false
        };
      }
      this.debug("[set] enter with:");
      this.debug(value);
      if (value === this.content && !opts.force) {
        return this;
      }
      if (!(this.mutable || (value == null) || opts.force)) {
        throw this.error("cannot set data on read-only element");
      }
      try {
        if (!(value instanceof Function)) {
          if (value.__ instanceof Property && value.__ !== this) {
            this.debug("[set] cloning existing property for assignment");
            value = clone(value);
          }
          if (!Object.isExtensible(value)) {
            value = Object.create(value);
          }
        }
        Object.defineProperty(value, '__', {
          configurable: true,
          value: this
        });
      } catch (error) {}
      value = (function() {
        switch (false) {
          case this.schema.apply == null:
            return this.schema.apply(value, this.context["with"](opts));
          default:
            return value;
        }
      }).call(this);
      if (value instanceof Error) {
        return this;
      }
      try {
        Object.defineProperties(value, {
          '__': {
            value: this
          },
          '$': {
            value: this.get.bind(this)
          }
        });
        if (this.schema.nodes.length && this.kind !== 'module') {
          for (k in value) {
            if (!hasProp.call(value, k)) continue;
            desc = Object.getOwnPropertyDescriptor(value, k);
            if (desc.writable === true && (this.schema.locate(k) == null)) {
              this.debug("[set] hiding non-schema defined property: " + k);
              Object.defineProperty(value, k, {
                enumerable: false
              });
            }
          }
        }
      } catch (error) {}
      this.state.prev = this.state.value;
      this.state.enumerable = (value != null) || (this.binding != null);
      if (((ref = this.binding) != null ? ref.length : void 0) === 1 && !opts.force && ((ref1 = this.kind) !== 'action' && ref1 !== 'rpc')) {
        try {
          this.binding.call(this.context, value);
        } catch (error) {
          e = error;
          throw this.error("issue executing registered function binding during set()", e);
        }
      } else {
        this.state.value = value;
      }
      try {
        Object.defineProperty(this.container, this.name, {
          configurable: true,
          enumerable: this.state.enumerable
        });
      } catch (error) {}
      if (this === this.root || !opts.suppress) {
        this.emit('update', this);
      }
      this.debug("[set] completed");
      return this;
    };

    Property.prototype.merge = function(value, opts) {
      var attr, combine, conflicts, copy, exists, i, k, len, length, newitems, ref, v;
      if (opts == null) {
        opts = {
          replace: true,
          suppress: false
        };
      }
      if (opts.replace == null) {
        opts.replace = true;
      }
      if (!(this.content instanceof Object)) {
        opts.replace = false;
        return this.set(value, opts);
      }
      if ((value != null) && value.hasOwnProperty(this.name)) {
        value = value[this.name];
      }
      if (!(value instanceof Object)) {
        return this;
      }
      if (Array.isArray(this.content)) {
        length = this.content.length;
        this.debug("[merge] merging into existing Array(" + length + ") for " + this.name);
        this.debug(value);
        if (!Array.isArray(value)) {
          value = [value];
        }
        copy = this.clone();
        copy.set(value, {
          force: opts.force,
          suppress: true
        });
        this.debug("[merge] combining and applying schema");
        if ((this.schema.key != null) && opts.replace) {
          exists = {};
          this.content.forEach(function(item) {
            var key;
            key = item['@key'];
            return exists[key] = item;
          });
          this.debug("[merge] reducing existing keys");
          conflicts = 0;
          newitems = copy.content.reduce((function(a, item) {
            var key;
            key = item['@key'];
            item.__.name -= conflicts;
            if (key in exists) {
              conflicts++;
              exists[key].__.merge(item);
            } else {
              a.push(item);
            }
            return a;
          }), []);
          combine = this.content.concat(newitems);
        } else {
          newitems = copy.content;
          combine = this.content.concat(newitems);
        }
        ref = this.schema.attrs;
        for (i = 0, len = ref.length; i < len; i++) {
          attr = ref[i];
          attr.apply(combine);
        }
        newitems.forEach((function(_this) {
          return function(item) {
            item.__.name += length;
            return item.__.join(_this.content, opts);
          };
        })(this));
        if (!opts.suppress) {
          this.emit('update', copy);
        }
        return copy;
      } else {
        this.debug("[merge] merging into existing Object(" + (Object.keys(this.content).length) + ") for " + this.name);
        for (k in value) {
          if (!hasProp.call(value, k)) continue;
          v = value[k];
          if (this.content.hasOwnProperty(k)) {
            this.content[k] = v;
          }
        }
        return this;
      }
    };

    Property.prototype.create = function(value) {
      var res;
      if ((this.content == null) && this.kind === 'list' && !Array.isArray(value)) {
        value = [value];
      }
      res = this.merge(value, {
        replace: false
      });
      this.emit('create', res);
      return res;
    };

    Property.prototype.remove = function() {
      if (this.container == null) {
        return this;
      }
      if (this.key != null) {
        this.container.splice(this.name, 1);
      } else {
        this.state.enumerable = false;
        if (this.kind !== 'list') {
          this.state.value = void 0;
        }
        Object.defineProperty(this.container, this.name, {
          enumerable: false
        });
      }
      if (this.parent != null) {
        this.emit('update', this.parent);
      }
      this.emit('delete', this);
      return this;
    };

    Property.prototype.find = function(pattern, opts) {
      var ref, ref1;
      if (pattern == null) {
        pattern = '.';
      }
      if (opts == null) {
        opts = {};
      }
      this.debug("[find] " + pattern);
      if (!(pattern instanceof XPath)) {
        if (/^\.\.\//.test(pattern) && (this.parent != null)) {
          return this.parent.find(pattern.replace(/^\.\.\//, ''), opts);
        }
        if (/^\//.test(pattern) && this !== this.root) {
          return this.root.find(pattern, opts);
        }
        pattern = XPath.parse(pattern, this.schema);
      }
      this.debug("[find] using " + pattern);
      if (opts.root || (this.container == null) || ((ref = pattern.tag) !== '/' && ref !== '..')) {
        this.debug("[find] apply " + pattern);
        this.debug(this.content);
        return (ref1 = pattern.apply(this.content).props) != null ? ref1 : [];
      } else {
        switch (false) {
          case !(pattern.tag === '/' && (this.parent != null)):
            return this.parent.find(pattern, opts);
          case !(pattern.tag === '..' && (this.parent != null)):
            return this.parent.find(pattern.xpath, opts);
          default:
            return [];
        }
      }
    };

    Property.prototype["in"] = function(pattern) {
      var props;
      try {
        props = this.find(pattern);
      } catch (error) {}
      if (!((props != null) && props.length)) {
        return;
      }
      switch (false) {
        case !(props.length > 1):
          return props;
        default:
          return props[0];
      }
    };

    Property.prototype.invoke = function() {
      console.warn("DEPRECATION: please use .do() instead");
      return this["do"].apply(this, arguments);
    };

    Property.prototype["do"] = function() {
      var ctx, e, ref, ref1;
      if (!(this.content instanceof Function)) {
        return Promise.reject(this.error("cannot perform action on a property without function"));
      }
      try {
        this.debug("[do] executing method: " + this.name);
        ctx = this.context["with"]({
          '__': this
        });
        if ((ref = this.schema.input) != null) {
          ref["eval"](ctx.state);
        }
        if ((ref1 = this.schema.output) != null) {
          ref1["eval"](ctx.state);
        }
        ctx.input = arguments;
        if (this.binding != null) {
          this.debug("[do] calling bound function");
          this.debug(this.binding.toString());
          this.binding.apply(ctx, arguments);
        } else {
          this.debug("[do] calling assigned function");
          this.debug(this.content.toString());
          ctx.output = this.content.apply(ctx, arguments);
        }
        return co((function(_this) {
          return function*() {
            _this.debug("[do] evaluating output schema");
            ctx.output = (yield Promise.resolve(ctx.output));
            _this.debug("[do] finish setting output");
            return ctx.output;
          };
        })(this));
      } catch (error) {
        e = error;
        this.debug(e);
        return Promise.reject(e);
      }
    };

    Property.prototype.error = function(msg, ctx) {
      var at, res;
      if (ctx == null) {
        ctx = this;
      }
      at = "" + this.path;
      if (at === '/') {
        at += this.name;
      }
      res = new Error("[" + at + "] " + msg);
      res.name = 'PropertyError';
      res.context = ctx;
      return res;
    };

    Property.prototype.debug = function(msg) {
      var node, prefix;
      if (debug != null) {
        switch (typeof msg) {
          case 'object':
            return debug(msg);
          default:
            node = this;
            prefix = [this.name];
            while ((node = node.parent)) {
              prefix.unshift(node.name);
            }
            return debug("[" + (prefix.join('/')) + "] " + msg);
        }
      }
    };

    Property.prototype.inspect = function() {
      var ref;
      return {
        name: (ref = this.schema.tag) != null ? ref : this.name,
        kind: this.schema.kind,
        key: this.key,
        xpath: this.path.toString(),
        schema: this.schema.toJSON({
          tag: false,
          extended: true
        }),
        active: this.enumerable,
        readonly: !this.mutable
      };
    };

    Property.prototype.toJSON = function(tag) {
      var copy, name, obj1, value;
      if (tag == null) {
        tag = true;
      }
      copy = function(src) {
        var k, res, v;
        if (!((src != null) && typeof src !== 'function')) {
          return;
        }
        if (typeof src === 'object') {
          try {
            res = new src.constructor;
          } catch (error) {
            res = {};
          }
          for (k in src) {
            if (!hasProp.call(src, k)) continue;
            v = src[k];
            if (typeof v !== 'function') {
              res[k] = copy(v);
            }
          }
          return res;
        }
        return src.constructor.call(src, src);
      };
      value = copy(this.get());
      if (this.kind === 'list') {
        if (value == null) {
          value = [];
        }
      }
      if (tag) {
        name = (function() {
          switch (false) {
            case this.kind !== 'list':
              return this.schema.datakey;
            default:
              return this.name;
          }
        }).call(this);
        return (
          obj1 = {},
          obj1["" + name] = value,
          obj1
        );
      } else {
        return value;
      }
    };

    return Property;

  })();

  module.exports = Property;

}).call(this);

}).call(this,require('_process'))
},{"./context":2,"./xpath":12,"_process":30,"clone":18,"co":19,"debug":21,"delegates":23,"events":24}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  var Expression, Typedef,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Expression = require('./expression');

  Typedef = (function(superClass) {
    extend(Typedef, superClass);

    function Typedef() {
      Typedef.__super__.constructor.apply(this, ['typedef'].concat(slice.call(arguments)));
    }

    Typedef.property('convert', {
      get: function() {
        var ref;
        return (ref = this.construct) != null ? ref : function(x) {
          return x;
        };
      }
    });

    return Typedef;

  })(Expression);

  module.exports = Typedef;

}).call(this);

},{"./expression":4}],12:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var Expression, Filter, Operator, XPath, debug, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:xpath');
  }

  Expression = require('./expression');

  Operator = require('../ext/parser').Parser;

  Filter = (function(superClass) {
    extend(Filter, superClass);

    function Filter(pattern1) {
      var e, expr;
      this.pattern = pattern1 != null ? pattern1 : '';
      if (!((Number.isNaN(Number(this.pattern))) || ((Number(this.pattern)) % 1) !== 0)) {
        expr = Number(this.pattern);
      } else {
        try {
          expr = Operator.parse(this.pattern);
        } catch (error) {
          e = error;
          console.error("unable to parse '" + this.pattern + "'");
          throw e;
        }
      }
      if (!expr) {
        throw this.error("invalid predicate filter: [" + expr + "]");
      }
      Filter.__super__.constructor.call(this, 'filter', expr, {
        argument: 'predicate',
        scope: {},
        transform: function(data) {
          var elem, i, key, len, vars;
          if (!(data instanceof Array)) {
            return data;
          }
          if (!(data.length > 0)) {
            return data;
          }
          if (typeof debug === "function") {
            debug("filter: " + this.tag);
          }
          if (typeof this.tag === 'number') {
            return [data[this.tag - 1]];
          }
          vars = this.tag.variables();
          if (indexOf.call(vars, 'key') >= 0) {
            key = this.pattern.replace(/key\('(.+)'\)/, '$1');
            for (i = 0, len = data.length; i < len; i++) {
              elem = data[i];
              if (elem['@key'] === key) {
                return [elem];
              }
            }
            return [];
          }
          data = data.filter((function(_this) {
            return function(elem) {
              expr = vars.reduce((function(a, b) {
                a[b] = (function() {
                  switch (b) {
                    case 'current':
                      return function() {
                        return elem;
                      };
                    case 'false':
                      return function() {
                        return false;
                      };
                    case 'true':
                      return function() {
                        return true;
                      };
                    default:
                      return elem[b];
                  }
                })();
                return a;
              }), {});
              try {
                return _this.tag.evaluate(expr);
              } catch (error) {
                e = error;
                if (typeof debug === "function") {
                  debug(e);
                }
                return false;
              }
            };
          })(this));
          return data;
        }
      });
    }

    Filter.prototype.clone = function() {
      return new this.constructor(this.pattern);
    };

    Filter.prototype.toString = function() {
      return this.pattern;
    };

    return Filter;

  })(Expression);

  XPath = (function(superClass) {
    extend(XPath, superClass);

    function XPath(pattern, schema) {
      var e, elements, match, predicates, ref, target;
      if (typeof pattern !== 'string') {
        throw this.error("must pass in 'pattern' as valid string");
      }
      if (typeof debug === "function") {
        debug("[" + pattern + "] constructing...");
      }
      elements = pattern.match(/([^\/^\[]*(?:\[.+?\])*)/g);
      if (elements == null) {
        elements = [];
      }
      elements = elements.filter(function(x) {
        return !!x;
      });
      if (/^\//.test(pattern)) {
        target = '/';
        if (schema instanceof Expression) {
          schema = schema.root;
        }
        predicates = [];
      } else {
        if (!(elements.length > 0)) {
          throw this.error("unable to process '" + pattern + "' (please check your input)");
        }
        ref = elements.shift().split(/\[\s*(.+?)\s*\]/), target = ref[0], predicates = 2 <= ref.length ? slice.call(ref, 1) : [];
        if (target == null) {
          throw this.error("unable to process '" + pattern + "' (missing axis)");
        }
        predicates = predicates.filter(function(x) {
          return !!x;
        });
        if (schema instanceof Expression) {
          if (typeof debug === "function") {
            debug("[" + pattern + "] with " + schema.kind + "(" + schema.tag + ")");
          }
          try {
            match = schema.locate(target);
          } catch (error) {
            e = error;
            console.warn(e);
          }
          if (match == null) {
            switch (schema.kind) {
              case 'list':
                predicates.unshift((function() {
                  switch (false) {
                    case schema.key == null:
                      return "key('" + target + "')";
                    default:
                      return target;
                  }
                })());
                target = '.';
                break;
              case 'anydata':
                schema = void 0;
                break;
              default:
                throw this.error("unable to locate '" + target + "' inside schema: " + schema.trail);
            }
          } else {
            schema = match;
            if (!/^\./.test(target)) {
              target = schema.datakey;
            }
          }
        }
      }
      XPath.__super__.constructor.call(this, 'xpath', target, {
        argument: 'node',
        scope: {
          filter: '0..n',
          xpath: '0..1'
        },
        transform: function(data) {
          return this.process(data);
        }
      });
      if (schema instanceof Expression) {
        Object.defineProperty(this, 'schema', {
          value: schema
        });
      }
      if (predicates.length > 0) {
        this["extends"].apply(this, predicates.map(function(x) {
          return new Filter(x);
        }));
      }
      if (elements.length > 0) {
        this["extends"](elements.join('/'));
      }
      if (typeof debug === "function") {
        debug("[" + pattern + "] construction complete");
      }
    }

    XPath.prototype.clone = function() {
      var ref, schema;
      if (typeof debug === "function") {
        debug("[" + this.tag + "] cloning...");
      }
      schema = this.tag === '/' ? this.schema : (ref = this.parent) != null ? ref.schema : void 0;
      return (new this.constructor(this.tag, schema))["extends"](this.elements.map(function(x) {
        return x.clone();
      }));
    };

    XPath.prototype.merge = function(elem) {
      elem = (function() {
        switch (false) {
          case !(elem instanceof Expression):
            return elem;
          default:
            return new XPath(elem, this.schema);
        }
      }).call(this);
      if (elem.tag === '.') {
        if (typeof debug === "function") {
          debug("[merge] absorbing sub-XPATH into '" + this.tag + "'");
        }
        this["extends"](elem.filter, elem.xpath);
        return this;
      } else {
        return XPath.__super__.merge.call(this, elem);
      }
    };

    XPath.prototype.process = function(data) {
      var expr, i, len, props, ref, ref1, ref2, ref3;
      if (typeof debug === "function") {
        debug("[" + this.tag + "] process using schema from " + ((ref = this.schema) != null ? ref.kind : void 0) + ":" + ((ref1 = this.schema) != null ? ref1.tag : void 0));
      }
      if (typeof debug === "function") {
        debug(data);
      }
      if (!(data instanceof Object)) {
        return [];
      }
      props = [];
      if (!(data instanceof Array)) {
        data = [data];
      }
      data = data.reduce(((function(_this) {
        return function(a, b) {
          if (!(b instanceof Array)) {
            b = [b];
          }
          return a.concat.apply(a, b.map(function(elem) {
            return _this.match(elem, props);
          }));
        };
      })(this)), []);
      data = data.filter(function(e) {
        return e != null;
      });
      if (typeof debug === "function") {
        debug("[" + this.tag + "] found " + data.length + " matching nodes");
      }
      if (typeof debug === "function") {
        debug(data);
      }
      if (this.filter != null) {
        ref2 = this.filter;
        for (i = 0, len = ref2.length; i < len; i++) {
          expr = ref2[i];
          if (!data.length) {
            break;
          }
          data = expr["eval"](data);
        }
      }
      if (this.xpath != null) {
        if (typeof debug === "function") {
          debug("apply additional XPATH expressions");
        }
        if ((this.xpath != null) && data.length) {
          data = this.xpath["eval"](data);
        }
      } else {
        if (typeof debug === "function") {
          debug("end of XPATH, collecting props");
        }
        if (this.filter != null) {
          props = (data.map(function(x) {
            return x.__;
          })).filter(function(x) {
            return x != null;
          });
        }
        if (typeof debug === "function") {
          debug(props);
        }
        Object.defineProperty(data, 'props', {
          value: props
        });
      }
      if (typeof debug === "function") {
        debug("[" + this.tag + "] returning " + data.length + " data with " + ((ref3 = data.props) != null ? ref3.length : void 0) + " properties");
      }
      return data;
    };

    XPath.prototype.match = function(item, props) {
      var k, key, res, v;
      if (props == null) {
        props = [];
      }
      key = (function() {
        switch (false) {
          case this.tag !== '/':
            return '.';
          default:
            return this.tag;
        }
      }).call(this);
      if (!(item instanceof Object)) {
        return;
      }
      res = (function() {
        var ref, results;
        switch (false) {
          case key !== '.':
            return item;
          case key !== '..':
            switch (false) {
              case !((item.__ != null) && (item.__.key != null)):
                return item.__.parent.container;
              case item.__ == null:
                return item.__.container;
            }
            break;
          case key !== '*':
            results = [];
            for (k in item) {
              if (!hasProp.call(item, k)) continue;
              v = item[k];
              results.push(v);
            }
            return results;
          case !item.hasOwnProperty(key):
            return item[key];
          case !(this.schema instanceof Expression):
            key = this.schema.datakey;
            return item[key];
          case item.__ == null:
            key = (ref = item.__.schema) != null ? ref.datakey : void 0;
            if (key != null) {
              return item[key];
            }
        }
      }).call(this);
      switch (false) {
        case key !== '*':
          if (res != null) {
            res.forEach(function(x) {
              if (x.__ != null) {
                return props.push(x.__);
              }
            });
          }
          break;
        case (res != null ? res.__ : void 0) == null:
          props.push(res.__);
          break;
        case item.__props__ == null:
          if (key in item.__props__) {
            props.push(item.__props__[key]);
          }
      }
      return res;
    };

    XPath.prototype.locate = function(pattern) {
      try {
        if (!(pattern instanceof XPath)) {
          pattern = new XPath(pattern, this.schema);
        }
        if (this.tag !== pattern.tag) {
          return;
        }
        if (!((pattern.filter == null) || ("" + this.filter) === ("" + pattern.filter))) {
          return;
        }
        switch (false) {
          case !((this.xpath != null) && (pattern.xpath != null)):
            return this.xpath.locate(pattern.xpath);
          case pattern.xpath == null:
            return void 0;
          default:
            return this;
        }
      } catch (error) {}
    };

    XPath.prototype.trim = function(pattern) {
      var match;
      match = this.locate(pattern);
      if (match != null) {
        delete match.xpath;
      }
      return this;
    };

    XPath.prototype.append = function(pattern) {
      var end;
      end = this;
      while (end.xpath != null) {
        end = end.xpath;
      }
      if (typeof debug === "function") {
        debug("[" + this.tag + "] appending " + pattern + " to " + end.tag);
      }
      end.merge(pattern);
      return this;
    };

    XPath.prototype.contains = function() {
      var i, len, pattern, patterns;
      patterns = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (i = 0, len = patterns.length; i < len; i++) {
        pattern = patterns[i];
        if (this.locate(pattern) != null) {
          return pattern;
        }
      }
    };

    XPath.prototype.toString = function() {
      var filter, i, len, ref, s;
      s = this.tag === '/' ? '' : this.tag;
      if (this.filter != null) {
        ref = this.filter;
        for (i = 0, len = ref.length; i < len; i++) {
          filter = ref[i];
          s += "[" + filter + "]";
        }
      }
      if (this.xpath != null) {
        s += "/" + this.xpath;
      }
      if (!s) {
        s = this.tag;
      }
      return s;
    };

    return XPath;

  })(Expression);

  exports = module.exports = XPath;

  exports.Filter = Filter;

  exports.parse = function(pattern, schema) {
    return new XPath(pattern, schema);
  };

}).call(this);

}).call(this,require('_process'))
},{"../ext/parser":1,"./expression":4,"_process":30,"debug":21}],13:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var Expression, Yang, debug, fs, indent, parser, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:schema');
  }

  

  path = require('path');

  parser = require('yang-parser');

  indent = require('indent-string');

  Expression = require('./expression');

  Yang = (function(superClass) {
    extend(Yang, superClass);

    Yang.scope = {
      extension: '0..n',
      typedef: '0..n',
      module: '0..n',
      submodule: '0..n'
    };

    Yang.clear = function() {
      if (this.module != null) {
        this.module.splice(0, this.module.length);
      }
      if (this.submodule != null) {
        return this.submodule.splice(0, this.submodule.length);
      }
    };

    Yang.parse = function(schema, opts) {
      var constraint, e, kind, offender, ref, tag;
      if (opts == null) {
        opts = {};
      }
      if (opts.compile == null) {
        opts.compile = true;
      }
      try {
        if (typeof schema === 'string') {
          schema = parser.parse(schema);
        }
      } catch (error) {
        e = error;
        if (!(e.offset > 50)) {
          e.offset = 50;
        }
        offender = schema.slice(e.offset - 50, e.offset + 50);
        offender = offender.replace(/\s\s+/g, ' ');
        throw this.error("invalid YANG syntax detected around: '" + offender + "'", offender);
      }
      if (!(schema instanceof Object)) {
        throw this.error("must pass in valid YANG schema", schema);
      }
      kind = (function() {
        switch (false) {
          case !schema.prf:
            return schema.prf + ":" + schema.kw;
          default:
            return schema.kw;
        }
      })();
      if (!!schema.arg) {
        tag = schema.arg;
      }
      schema = (new this(kind, tag))["extends"](schema.substmts.map((function(_this) {
        return function(x) {
          return _this.parse(x, false);
        };
      })(this)));
      ref = schema.scope;
      for (kind in ref) {
        constraint = ref[kind];
        if (constraint === '1' || constraint === '1..n') {
          if (!schema.hasOwnProperty(kind)) {
            throw schema.error("constraint violation for required '" + kind + "' = " + constraint);
          }
        }
      }
      if (opts.compile) {
        schema.compile();
      }
      return schema;
    };

    Yang.compose = function(data, opts) {
      var ext, i, len, ref, res;
      if (opts == null) {
        opts = {};
      }
      if (data == null) {
        throw this.error("must supply input 'data' to compose");
      }
      if (opts.kind != null) {
        ext = Yang.prototype.lookup.call(this, 'extension', opts.kind);
        if (!(ext instanceof Expression)) {
          throw this.error("unable to find requested '" + opts.kind + "' extension");
        }
        return typeof ext.compose === "function" ? ext.compose(data, opts) : void 0;
      }
      ref = this.extension;
      for (i = 0, len = ref.length; i < len; i++) {
        ext = ref[i];
        if (!(ext.compose instanceof Function)) {
          continue;
        }
        if (typeof debug === "function") {
          debug("checking data if " + ext.tag);
        }
        res = ext.compose(data, opts);
        if (res instanceof Yang) {
          return res;
        }
      }
    };

    Yang.resolve = function() {
      var dir, file, found, from, i, name, pkginfo, target;
      from = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), name = arguments[i++];
      if (typeof name !== 'string') {
        return null;
      }
      dir = from = (function() {
        switch (false) {
          case !from.length:
            return from[0];
          default:
            return path.resolve();
        }
      })();
      while ((found == null) && (dir !== '/' && dir !== '.')) {
        target = dir + "/package.json";
        if (typeof debug === "function") {
          debug("[resolve] " + name + " in " + target);
        }
        try {
          pkginfo = require(target);
          found = pkginfo.models[name];
        } catch (error) {}
        if (found != null) {
          dir = path.dirname(require.resolve(target));
          if (typeof debug === "function") {
            debug("[resolve] " + name + " check " + found + " in " + dir);
          }
          if (!path.extname(found)) {
            from = (function() {
              switch (false) {
                case !(found in pkginfo.dependencies):
                  return path.resolve(dir, 'node_modules', found);
                default:
                  return path.resolve(dir, found);
              }
            })();
            if (fs.existsSync(from)) {
              return this.resolve(from, name);
            } else {
              found = this.resolve(found, name);
            }
          }
        }
        if ((found == null) && (pkginfo != null ? pkginfo.name : void 0) === name) {
          found = path.dirname(require.resolve(target));
        }
        if (found == null) {
          dir = path.dirname(dir);
        }
      }
      file = (function() {
        switch (false) {
          case !(found == null):
            return path.resolve(from, name + ".yang");
          default:
            return path.resolve(dir, found);
        }
      })();
      if (typeof debug === "function") {
        debug("[resolve] checking if " + file + " exists");
      }
      if (fs.existsSync(file)) {
        return file;
      } else {
        return null;
      }
    };

    Yang.require = function() {
      console.warn("DEPRECATION: please use .import() instead");
      return this["import"].apply(this, arguments);
    };

    Yang["import"] = function(name, opts) {
      var basedir, dependency, e, extname, filename, ref, ref1, res;
      if (opts == null) {
        opts = {};
      }
      if (name == null) {
        return;
      }
      if (opts.basedir == null) {
        opts.basedir = '';
      }
      extname = path.extname(name);
      filename = path.resolve(opts.basedir, name);
      basedir = path.dirname(filename);
      if (!extname) {
        return (ref = Yang.prototype.match.call(this, 'module', name)) != null ? ref : this["import"](this.resolve(name), opts);
      }
      if (extname !== '.yang') {
        res = require(filename);
        if (!(res instanceof Yang)) {
          throw this.error("unable to import '" + name + "' from '" + filename + "' (not Yang expression)", res);
        }
        return res;
      }
      try {
        return this.use(this.parse(fs.readFileSync(filename, 'utf-8'), opts));
      } catch (error) {
        e = error;
        if (!(opts.compile && e.name === 'ExpressionError' && ((ref1 = e.context.kind) === 'include' || ref1 === 'import'))) {
          console.error("unable to import '" + name + "' YANG module from '" + filename + "'");
          throw e;
        }
        if (e.context.kind === 'include') {
          opts.compile = false;
        }
        dependency = this["import"](this.resolve(basedir, e.context.tag), opts);
        if (dependency == null) {
          e.message = "unable to auto-resolve '" + e.context.tag + "' dependency module";
          throw e;
        }
        if (typeof debug === "function") {
          debug("retrying import(" + name + ")");
        }
        return this["import"].apply(this, arguments);
      }
    };

    function Yang(kind, tag, extension) {
      var bindings, schema, self;
      if (!(this instanceof Yang)) {
        schema = arguments[0], bindings = arguments[1];
        if (!(schema instanceof Yang)) {
          schema = Yang.parse(schema);
        }
        return schema.bind(bindings);
      }
      if (extension == null) {
        extension = this.lookup('extension', kind);
      }
      self = Yang.__super__.constructor.call(this, kind, tag, extension);
      if (!(extension instanceof Expression)) {
        this.debug("defer processing of custom extension " + kind);
        this.once('compile:before', (function() {
          this.debug("processing deferred extension " + kind);
          extension = this.lookup('extension', kind);
          if (!(extension instanceof Yang)) {
            throw this.error("encountered unknown extension '" + kind + "'");
          }
          return this.source = extension.source, this.argument = extension.argument, extension;
        }).bind(self));
      }
      return self;
    }

    Yang.property('datakey', {
      get: function() {
        var ref;
        switch (false) {
          case !(this.parent instanceof Yang && this.parent.kind === 'module'):
            return this.parent.tag + ":" + this.tag;
          case !(this.parent instanceof Yang && this.parent.kind === 'submodule'):
            return this.parent['belongs-to'].tag + ":" + this.tag;
          default:
            return (ref = this.tag) != null ? ref : this.kind;
        }
      }
    });

    Yang.property('datapath', {
      get: function() {
        switch (false) {
          case this.parent instanceof Yang:
            return '';
          case !this.node:
            return this.parent.datapath + ("/" + this.datakey);
          default:
            return this.parent.datapath;
        }
      }
    });

    Yang.prototype.error = function(msg, context) {
      return Yang.__super__.error.call(this, "[" + this.trail + "] " + msg, context);
    };

    Yang.prototype.emit = function() {
      var args, event, ref;
      event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      (ref = this.emitter).emit.apply(ref, arguments);
      if (event === 'change' && this !== this.root) {
        return this.root.emit(event, this);
      }
    };

    Yang.prototype["eval"] = function(data, opts) {
      if (opts == null) {
        opts = {};
      }
      if (opts.adaptive === true) {
        this.once('change', arguments.callee.bind(this, data, opts));
      }
      return Yang.__super__["eval"].apply(this, arguments);
    };

    Yang.prototype.merge = function(elem) {
      if (!(elem instanceof Yang)) {
        throw this.error("cannot merge invalid element into Yang", elem);
      }
      switch (elem.kind) {
        case 'type':
          return Yang.__super__.merge.call(this, elem, {
            append: true
          });
        case 'argument':
          return Yang.__super__.merge.call(this, elem, {
            replace: true
          });
        default:
          return Yang.__super__.merge.apply(this, arguments);
      }
    };

    Yang.prototype.normalizePath = function(ypath) {
      var lastPrefix, normalizeEntry, prefix2module;
      lastPrefix = null;
      prefix2module = function(root, prefix) {
        var i, j, len, len1, m, modules, ref, ref1;
        if (root.kind !== 'module') {
          return;
        }
        switch (false) {
          case root.tag !== prefix:
            return prefix;
          case root.prefix.tag !== prefix:
            return root.tag;
          default:
            ref1 = (ref = root["import"]) != null ? ref : [];
            for (i = 0, len = ref1.length; i < len; i++) {
              m = ref1[i];
              if (m.tag === prefix || m.prefix.tag === prefix) {
                return m.tag;
              }
            }
            modules = root.lookup('module');
            for (j = 0, len1 = modules.length; j < len1; j++) {
              m = modules[j];
              if (m.tag === prefix || m.prefix.tag === prefix) {
                return m.tag;
              }
            }
            return prefix;
        }
      };
      normalizeEntry = (function(_this) {
        return function(x) {
          var match, mname, prefix, ref, target;
          if (!((x != null) && !!x)) {
            return x;
          }
          match = x.match(/^(?:([._-\w]+):)?([.{[<\w][.,+_\-}():>\]\w]*)$/);
          if (match == null) {
            throw _this.error("invalid path expression '" + x + "' found in " + ypath);
          }
          ref = [match[1], match[2]], prefix = ref[0], target = ref[1];
          switch (false) {
            case !(prefix == null):
              return target;
            case prefix !== lastPrefix:
              return target;
            default:
              lastPrefix = prefix;
              mname = prefix2module(_this.root, prefix);
              return mname + ":" + target;
          }
        };
      })(this);
      ypath = ypath.replace(/\s/g, '');
      return ypath.split('/').map(normalizeEntry).join('/');
    };

    Yang.prototype.locate = function(ypath) {
      var i, j, key, kind, len, m, match, prefix, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, rest, search, selector, tag, target;
      if (ypath == null) {
        return;
      }
      this.debug("locate enter for '" + ypath + "'");
      if (typeof ypath === 'string') {
        if ((/^\//.test(ypath)) && this !== this.root) {
          return this.root.locate(ypath);
        }
        ref = this.normalizePath(ypath).split('/').filter(function(e) {
          return !!e;
        }), key = ref[0], rest = 2 <= ref.length ? slice.call(ref, 1) : [];
      } else {
        key = ypath[0], rest = 2 <= ypath.length ? slice.call(ypath, 1) : [];
      }
      if (!((key != null) && key !== '.')) {
        return this;
      }
      if (key === '..') {
        return (ref1 = this.parent) != null ? ref1.locate(rest) : void 0;
      }
      match = key.match(/^(?:([._-\w]+):)?([.{[<\w][.,+_\-}():>\]\w]*)$/);
      ref2 = [match[1], match[2]], prefix = ref2[0], target = ref2[1];
      if ((prefix != null) && this === this.root) {
        search = [target].concat(rest);
        if ((this.tag === prefix) || (this.lookup('prefix', prefix))) {
          this.debug("locate (local) '/" + prefix + ":" + (search.join('/')) + "'");
          return Yang.__super__.locate.call(this, search);
        }
        ref4 = (ref3 = this["import"]) != null ? ref3 : [];
        for (i = 0, len = ref4.length; i < len; i++) {
          m = ref4[i];
          if (!(m.tag === prefix || m.prefix.tag === prefix)) {
            continue;
          }
          this.debug("locate (external) '/" + prefix + ":" + (search.join('/')) + "'");
          return m.module.locate(search);
        }
        m = this.lookup('module', prefix);
        return m != null ? m.locate(search) : void 0;
      }
      switch (false) {
        case !/^{.+}$/.test(target):
          kind = 'grouping';
          tag = target.replace(/^{(.+)}$/, '$1');
          break;
        case !/^\[.+\]$/.test(target):
          kind = 'feature';
          tag = target.replace(/^\[(.+)\]$/, '$1');
          break;
        case !/^[^(]+\([^)]*\)$/.test(target):
          target = target.match(/^([^(]+)\((.*)\)$/);
          ref5 = [target[1], target[2]], kind = ref5[0], tag = ref5[1];
          if (!tag) {
            tag = void 0;
          }
          break;
        case !/^\<.+\>$/.test(target):
          target = target.replace(/^\<(.+)\>$/, '$1');
          ref6 = target.split(':'), kind = 2 <= ref6.length ? slice.call(ref6, 0, j = ref6.length - 1) : (j = 0, []), tag = ref6[j++];
          ref7 = tag.split('='), tag = ref7[0], selector = ref7[1];
          if (kind != null ? kind.length : void 0) {
            kind = kind[0];
          }
          break;
        default:
          return Yang.__super__.locate.call(this, [key].concat(rest));
      }
      match = this.match(kind, tag);
      switch (false) {
        case rest.length !== 0:
          return match;
        default:
          return match != null ? match.locate(rest) : void 0;
      }
    };

    Yang.prototype.match = function(kind, tag) {
      var arg, ctx, i, imports, j, len, m, prefix, ref, ref1, ref2, ref3, res;
      if (!((kind != null) && (tag != null) && typeof tag === 'string')) {
        return Yang.__super__.match.apply(this, arguments);
      }
      res = Yang.__super__.match.apply(this, arguments);
      if (res != null) {
        return res;
      }
      ref = tag.split(':'), prefix = 2 <= ref.length ? slice.call(ref, 0, i = ref.length - 1) : (i = 0, []), arg = ref[i++];
      if (!prefix.length) {
        return;
      }
      if (typeof debug === "function") {
        debug("[match] with " + kind + " " + tag);
      }
      prefix = prefix[0];
      if (typeof debug === "function") {
        debug("[match] check if current module's prefix");
      }
      if (this.root.tag === prefix || ((ref1 = this.root.prefix) != null ? ref1.tag : void 0) === prefix) {
        return this.root.match(kind, arg);
      }
      if (typeof debug === "function") {
        debug("[match] checking if submodule's parent");
      }
      ctx = this.lookup('belongs-to');
      if ((ctx != null ? ctx.prefix.tag : void 0) === prefix) {
        return ctx.module.match(kind, arg);
      }
      if (typeof debug === "function") {
        debug("[match] check if one of current module's imports");
      }
      imports = (ref2 = (ref3 = this.root) != null ? ref3["import"] : void 0) != null ? ref2 : [];
      for (j = 0, len = imports.length; j < len; j++) {
        m = imports[j];
        if (!(m.prefix.tag === prefix)) {
          continue;
        }
        if (typeof debug === "function") {
          debug(m.module);
        }
        return m.module.match(kind, arg);
      }
    };

    Yang.prototype.toString = function(opts) {
      var s, sub;
      if (opts == null) {
        opts = {
          space: 2
        };
      }
      s = this.kind;
      if (this.source.argument != null) {
        s += ' ' + (function() {
          switch (this.source.argument) {
            case 'value':
              return "'" + this.tag + "'";
            case 'text':
              return "\n" + (indent('"' + this.tag + '"', ' ', opts.space));
            default:
              return this.tag;
          }
        }).call(this);
      }
      sub = this.elements.filter((function(_this) {
        return function(x) {
          return x.parent === _this;
        };
      })(this)).map(function(x) {
        return x.toString(opts);
      }).join("\n");
      if (!!sub) {
        s += " {\n" + (indent(sub, ' ', opts.space)) + "\n}";
      } else {
        s += ';';
      }
      return s;
    };

    Yang.prototype.valueOf = function() {
      switch (this.source.argument) {
        case 'value':
        case 'text':
          return this.tag.valueOf();
        default:
          return this;
      }
    };

    return Yang;

  })(Expression);

  module.exports = Yang;

}).call(this);

}).call(this,require('_process'))
},{"./expression":4,"_process":30,"debug":21,"indent-string":25,"path":29,"yang-parser":40}],14:[function(require,module,exports){
"use strict";

// rawAsap provides everything we need except exception management.
var rawAsap = require("./raw");
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

},{"./raw":15}],15:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

/* globals self */
var scope = typeof global !== "undefined" ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],16:[function(require,module,exports){
(function (global){
'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"util/":39}],17:[function(require,module,exports){

},{}],18:[function(require,module,exports){
(function (Buffer){
var clone = (function() {
'use strict';

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (parent instanceof nativeMap) {
      child = new nativeMap();
    } else if (parent instanceof nativeSet) {
      child = new nativeSet();
    } else if (parent instanceof nativePromise) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      child = new Buffer(parent.length);
      parent.copy(child);
      return child;
    } else if (parent instanceof Error) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (parent instanceof nativeMap) {
      var keyIterator = parent.keys();
      while(true) {
        var next = keyIterator.next();
        if (next.done) {
          break;
        }
        var keyChild = _clone(next.value, depth - 1);
        var valueChild = _clone(parent.get(next.value), depth - 1);
        child.set(keyChild, valueChild);
      }
    }
    if (parent instanceof nativeSet) {
      var iterator = parent.keys();
      while(true) {
        var next = iterator.next();
        if (next.done) {
          break;
        }
        var entryChild = _clone(next.value, depth - 1);
        child.add(entryChild);
      }
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this,require("buffer").Buffer)
},{"buffer":17}],19:[function(require,module,exports){

/**
 * slice() reference.
 */

var slice = Array.prototype.slice;

/**
 * Expose `co`.
 */

module.exports = co['default'] = co.co = co;

/**
 * Wrap the given generator `fn` into a
 * function that returns a promise.
 * This is a separate function so that
 * every `co()` call doesn't create a new,
 * unnecessary closure.
 *
 * @param {GeneratorFunction} fn
 * @return {Function}
 * @api public
 */

co.wrap = function (fn) {
  createPromise.__generatorFunction__ = fn;
  return createPromise;
  function createPromise() {
    return co.call(this, fn.apply(this, arguments));
  }
};

/**
 * Execute the generator function or a generator
 * and return a promise.
 *
 * @param {Function} fn
 * @return {Promise}
 * @api public
 */

function co(gen) {
  var ctx = this;
  var args = slice.call(arguments, 1)

  // we wrap everything in a promise to avoid promise chaining,
  // which leads to memory leak errors.
  // see https://github.com/tj/co/issues/180
  return new Promise(function(resolve, reject) {
    if (typeof gen === 'function') gen = gen.apply(ctx, args);
    if (!gen || typeof gen.next !== 'function') return resolve(gen);

    onFulfilled();

    /**
     * @param {Mixed} res
     * @return {Promise}
     * @api private
     */

    function onFulfilled(res) {
      var ret;
      try {
        ret = gen.next(res);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * @param {Error} err
     * @return {Promise}
     * @api private
     */

    function onRejected(err) {
      var ret;
      try {
        ret = gen.throw(err);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * Get the next value in the generator,
     * return a promise.
     *
     * @param {Object} ret
     * @return {Promise}
     * @api private
     */

    function next(ret) {
      if (ret.done) return resolve(ret.value);
      var value = toPromise.call(ctx, ret.value);
      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '
        + 'but the following object was passed: "' + String(ret.value) + '"'));
    }
  });
}

/**
 * Convert a `yield`ed value into a promise.
 *
 * @param {Mixed} obj
 * @return {Promise}
 * @api private
 */

function toPromise(obj) {
  if (!obj) return obj;
  if (isPromise(obj)) return obj;
  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
  if ('function' == typeof obj) return thunkToPromise.call(this, obj);
  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
  if (isObject(obj)) return objectToPromise.call(this, obj);
  return obj;
}

/**
 * Convert a thunk to a promise.
 *
 * @param {Function}
 * @return {Promise}
 * @api private
 */

function thunkToPromise(fn) {
  var ctx = this;
  return new Promise(function (resolve, reject) {
    fn.call(ctx, function (err, res) {
      if (err) return reject(err);
      if (arguments.length > 2) res = slice.call(arguments, 1);
      resolve(res);
    });
  });
}

/**
 * Convert an array of "yieldables" to a promise.
 * Uses `Promise.all()` internally.
 *
 * @param {Array} obj
 * @return {Promise}
 * @api private
 */

function arrayToPromise(obj) {
  return Promise.all(obj.map(toPromise, this));
}

/**
 * Convert an object of "yieldables" to a promise.
 * Uses `Promise.all()` internally.
 *
 * @param {Object} obj
 * @return {Promise}
 * @api private
 */

function objectToPromise(obj){
  var results = new obj.constructor();
  var keys = Object.keys(obj);
  var promises = [];
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var promise = toPromise.call(this, obj[key]);
    if (promise && isPromise(promise)) defer(promise, key);
    else results[key] = obj[key];
  }
  return Promise.all(promises).then(function () {
    return results;
  });

  function defer(promise, key) {
    // predefine the key in the result
    results[key] = undefined;
    promises.push(promise.then(function (res) {
      results[key] = res;
    }));
  }
}

/**
 * Check if `obj` is a promise.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isPromise(obj) {
  return 'function' == typeof obj.then;
}

/**
 * Check if `obj` is a generator.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api private
 */

function isGenerator(obj) {
  return 'function' == typeof obj.next && 'function' == typeof obj.throw;
}

/**
 * Check if `obj` is a generator function.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api private
 */
function isGeneratorFunction(obj) {
  var constructor = obj.constructor;
  if (!constructor) return false;
  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;
  return isGenerator(constructor.prototype);
}

/**
 * Check for plain object.
 *
 * @param {Mixed} val
 * @return {Boolean}
 * @api private
 */

function isObject(val) {
  return Object == val.constructor;
}

},{}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Parser,
    __slice = [].slice;

  Parser = (function() {
    function Parser(pf) {
      this.pf = pf;
    }

    Parser.prototype.parse = function(text) {
      var res;
      Parser.prototype._text = text;
      res = this.pf(0);
      if (res[0] === null) {
        throw Parser.error("Parsing failed", res[1]);
      }
      return res[0];
    };

    Parser.unit = function(v) {
      return new Parser(function(offset) {
        return [v, offset];
      });
    };

    Parser.prototype.bind = function(f) {
      return new Parser((function(_this) {
        return function(offset) {
          var res;
          res = _this.pf(offset);
          if (res[0] === null) {
            return [null, res[1]];
          } else {
            return (f(res[0])).pf(res[1]);
          }
        };
      })(this));
    };

    Parser.prototype.orElse = function(other) {
      return new Parser((function(_this) {
        return function(offset) {
          var res;
          res = _this.pf(offset);
          if (res[0] === null) {
            return other.pf(offset);
          } else {
            return res;
          }
        };
      })(this));
    };

    Parser.choice = function() {
      var p, q;
      p = arguments[0], q = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (q.length === 0) {
        return p;
      } else {
        return p.orElse(Parser.choice.apply(null, q));
      }
    };

    Parser.prototype.many = function(min) {
      if (min == null) {
        min = 0;
      }
      return new Parser((function(_this) {
        return function(offset) {
          var npt, pt, res, val, _ref;
          res = [];
          pt = offset;
          while (true) {
            _ref = _this.pf(pt), val = _ref[0], npt = _ref[1];
            if (val === null) {
              break;
            }
            res.push(val);
            pt = npt;
          }
          if (res.length < min) {
            return [null, npt];
          } else {
            return [res, pt];
          }
        };
      })(this));
    };

    Parser.prototype.concat = function(min) {
      return this.many(min).bind(function(arr) {
        return Parser.unit(arr.join(''));
      });
    };

    Parser.prototype.skipMany = function(min) {
      if (min == null) {
        min = 0;
      }
      return new Parser((function(_this) {
        return function(offset) {
          var cnt, npt, pt, val, _ref;
          cnt = 0;
          pt = offset;
          while (true) {
            _ref = _this.pf(pt), val = _ref[0], npt = _ref[1];
            if (val === null) {
              break;
            }
            cnt++;
            pt = npt;
          }
          if (cnt < min) {
            return [null, npt];
          } else {
            return [cnt, pt];
          }
        };
      })(this));
    };

    Parser.prototype.manyTill = function(end) {
      return new Parser((function(_this) {
        return function(offset) {
          var npt, pt, res, val, _ref, _ref1;
          res = [];
          pt = offset;
          while (true) {
            _ref = end.pf(pt), val = _ref[0], npt = _ref[1];
            if (val !== null) {
              return [res, npt];
            }
            _ref1 = _this.pf(pt), val = _ref1[0], pt = _ref1[1];
            if (val === null) {
              return [null, pt];
            }
            res.push(val);
          }
        };
      })(this));
    };

    Parser.prototype.repeat = function(count) {
      if (count == null) {
        count = 2;
      }
      if (count <= 0) {
        return Parser.unit([]);
      } else {
        return this.bind((function(_this) {
          return function(head) {
            return _this.repeat(count - 1).bind(function(tail) {
              tail.unshift(head);
              return Parser.unit(tail);
            });
          };
        })(this));
      }
    };

    Parser.prototype.between = function(lft, rt) {
      return lft.bind((function(_this) {
        return function() {
          return _this.bind(function(res) {
            return rt.bind(function() {
              return Parser.unit(res);
            });
          });
        };
      })(this));
    };

    Parser.prototype.option = function(dflt) {
      if (dflt == null) {
        dflt = '';
      }
      return this.orElse(Parser.unit(dflt));
    };

    Parser.prototype.sepBy = function(sep, min) {
      if (min == null) {
        min = 0;
      }
      if (min === 0) {
        return this.sepBy(sep, 1).orElse(Parser.unit([]));
      } else {
        return this.bind((function(_this) {
          return function(head) {
            return (sep.bind(function() {
              return _this;
            })).many(min - 1).bind(function(tail) {
              tail.unshift(head);
              return Parser.unit(tail);
            });
          };
        })(this));
      }
    };

    Parser.prototype.endBy = function(sep, min) {
      if (min == null) {
        min = 0;
      }
      return (this.bind(function(x) {
        return sep.bind(function() {
          return Parser.unit(x);
        });
      })).many(min);
    };

    Parser.prototype.sepEndBy = function(sep, min) {
      if (min == null) {
        min = 0;
      }
      return this.sepBy(sep, min).bind(function(res) {
        return sep.option().bind(function() {
          return Parser.unit(res);
        });
      });
    };

    Parser.prototype.notFollowedBy = function(p) {
      return this.bind(function(res) {
        return new Parser(function(offset) {
          var val;
          val = (p.pf(offset))[0] === null ? res : null;
          return [val, offset];
        });
      });
    };

    Parser.eof = new Parser(function(offset) {
      var res;
      res = offset >= this._text.length ? true : null;
      return [res, offset];
    });

    Parser.anyChar = new Parser(function(offset) {
      var next;
      next = this._text[offset++];
      if (next != null) {
        return [next, offset];
      } else {
        return [null, offset];
      }
    });

    Parser.sat = function(pred) {
      return Parser.anyChar.bind(function(x) {
        if (pred(x)) {
          return Parser.unit(x);
        } else {
          return new Parser(function(offset) {
            return [null, offset - 1];
          });
        }
      });
    };

    Parser.char = function(ch) {
      return Parser.sat(function(x) {
        return ch === x;
      });
    };

    Parser.oneOf = function(alts) {
      return Parser.sat(function(x) {
        return alts.indexOf(x) >= 0;
      });
    };

    Parser.noneOf = function(alts) {
      return Parser.sat(function(x) {
        return alts.indexOf(x) === -1;
      });
    };

    Parser.lower = Parser.sat(function(x) {
      return /^[a-z]$/.test(x);
    });

    Parser.upper = Parser.sat(function(x) {
      return /^[A-Z]$/.test(x);
    });

    Parser.alphanum = Parser.sat(function(x) {
      return /^\w$/.test(x);
    });

    Parser.space = Parser.sat(function(x) {
      return /^\s$/.test(x);
    });

    Parser.digit = Parser.oneOf('0123456789');

    Parser.octDigit = Parser.oneOf('01234567');

    Parser.hexDigit = Parser.oneOf('01234567abcdefABCDEF');

    Parser.nat0 = Parser.digit.concat(1).bind(function(ds) {
      return Parser.unit(Number(ds));
    });

    Parser.letter = Parser.lower.orElse(Parser.upper);

    Parser.skipSpace = Parser.space.skipMany();

    Parser.string = function(str) {
      return new Parser(function(offset) {
        if (str === this._text.substr(offset, str.length)) {
          return [str, offset + str.length];
        } else {
          return [null, offset];
        }
      });
    };

    Parser.offset = new Parser(function(offset) {
      return [offset, offset];
    });

    Parser.offset2coords = function(offset, tab) {
      var beg, expTab, lf, ln;
      if (tab == null) {
        tab = 8;
      }
      expTab = function(from, to) {
        var c, cnt, _i, _len, _ref;
        cnt = 0;
        _ref = Parser.prototype._text.slice(from, to);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          cnt += c === '\t' ? tab : 1;
        }
        return cnt;
      };
      ln = 1;
      beg = 0;
      while (true) {
        lf = Parser.prototype._text.indexOf('\n', beg);
        if (lf === -1 || lf >= offset) {
          break;
        }
        ln += 1;
        beg = lf + 1;
      }
      return [ln, expTab(beg, offset)];
    };

    Parser.coordinates = new Parser(function(offset) {
      return [Parser.offset2coords(offset), offset];
    });

    Parser.error = function(msg, offset) {
      var res;
      res = new Error(msg);
      res.name = 'ParsingError';
      res.offset = offset;
      res.coords = this.offset2coords(offset);
      return res;
    };

    return Parser;

  })();

  if (module.exports != null) {
    module.exports = Parser;
  } else {
    this.Parser = Parser;
  }

}).call(this);

},{}],21:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window && typeof window.process !== 'undefined' && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window && window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":22,"_process":30}],22:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug.default = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":27}],23:[function(require,module,exports){

/**
 * Expose `Delegator`.
 */

module.exports = Delegator;

/**
 * Initialize a delegator.
 *
 * @param {Object} proto
 * @param {String} target
 * @api public
 */

function Delegator(proto, target) {
  if (!(this instanceof Delegator)) return new Delegator(proto, target);
  this.proto = proto;
  this.target = target;
  this.methods = [];
  this.getters = [];
  this.setters = [];
  this.fluents = [];
}

/**
 * Delegate method `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */

Delegator.prototype.method = function(name){
  var proto = this.proto;
  var target = this.target;
  this.methods.push(name);

  proto[name] = function(){
    return this[target][name].apply(this[target], arguments);
  };

  return this;
};

/**
 * Delegator accessor `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */

Delegator.prototype.access = function(name){
  return this.getter(name).setter(name);
};

/**
 * Delegator getter `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */

Delegator.prototype.getter = function(name){
  var proto = this.proto;
  var target = this.target;
  this.getters.push(name);

  proto.__defineGetter__(name, function(){
    return this[target][name];
  });

  return this;
};

/**
 * Delegator setter `name`.
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */

Delegator.prototype.setter = function(name){
  var proto = this.proto;
  var target = this.target;
  this.setters.push(name);

  proto.__defineSetter__(name, function(val){
    return this[target][name] = val;
  });

  return this;
};

/**
 * Delegator fluent accessor
 *
 * @param {String} name
 * @return {Delegator} self
 * @api public
 */

Delegator.prototype.fluent = function (name) {
  var proto = this.proto;
  var target = this.target;
  this.fluents.push(name);

  proto[name] = function(val){
    if ('undefined' != typeof val) {
      this[target][name] = val;
      return this;
    } else {
      return this[target][name];
    }
  };

  return this;
};

},{}],24:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],25:[function(require,module,exports){
'use strict';
var repeating = require('repeating');

module.exports = function (str, indent, count) {
	if (typeof str !== 'string' || typeof indent !== 'string') {
		throw new TypeError('`string` and `indent` should be strings');
	}

	if (count != null && typeof count !== 'number') {
		throw new TypeError('`count` should be a number');
	}

	if (count === 0) {
		return str;
	}

	indent = count > 1 ? repeating(indent, count) : indent;

	return str.replace(/^(?!\s*$)/mg, indent);
};

},{"repeating":34}],26:[function(require,module,exports){
'use strict';
var numberIsNan = require('number-is-nan');

module.exports = Number.isFinite || function (val) {
	return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
};

},{"number-is-nan":28}],27:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}

},{}],28:[function(require,module,exports){
'use strict';
module.exports = Number.isNaN || function (x) {
	return x !== x;
};

},{}],29:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":30}],30:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],31:[function(require,module,exports){
'use strict';

var asap = require('asap/raw');

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.


// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('not a function');
  }
  this._45 = 0;
  this._81 = 0;
  this._65 = null;
  this._54 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._10 = null;
Promise._97 = null;
Promise._61 = noop;

Promise.prototype.then = function(onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
};
function handle(self, deferred) {
  while (self._81 === 3) {
    self = self._65;
  }
  if (Promise._10) {
    Promise._10(self);
  }
  if (self._81 === 0) {
    if (self._45 === 0) {
      self._45 = 1;
      self._54 = deferred;
      return;
    }
    if (self._45 === 1) {
      self._45 = 2;
      self._54 = [self._54, deferred];
      return;
    }
    self._54.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  asap(function() {
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._81 === 1) {
        resolve(deferred.promise, self._65);
      } else {
        reject(deferred.promise, self._65);
      }
      return;
    }
    var ret = tryCallOne(cb, self._65);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {
    return reject(
      self,
      new TypeError('A promise cannot be resolved with itself.')
    );
  }
  if (
    newValue &&
    (typeof newValue === 'object' || typeof newValue === 'function')
  ) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (
      then === self.then &&
      newValue instanceof Promise
    ) {
      self._81 = 3;
      self._65 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._81 = 1;
  self._65 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._81 = 2;
  self._65 = newValue;
  if (Promise._97) {
    Promise._97(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._45 === 1) {
    handle(self, self._54);
    self._54 = null;
  }
  if (self._45 === 2) {
    for (var i = 0; i < self._54.length; i++) {
      handle(self, self._54[i]);
    }
    self._54 = null;
  }
}

function Handler(onFulfilled, onRejected, promise){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  })
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}

},{"asap/raw":15}],32:[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js');

module.exports = Promise;

/* Static Functions */

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._81 = 1;
  p._65 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._81 === 3) {
            val = val._65;
          }
          if (val._81 === 1) return res(i, val._65);
          if (val._81 === 2) reject(val._65);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};

},{"./core.js":31}],33:[function(require,module,exports){
// should work in any browser without browserify

if (typeof Promise.prototype.done !== 'function') {
  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this
    self.then(null, function (err) {
      setTimeout(function () {
        throw err
      }, 0)
    })
  }
}
},{}],34:[function(require,module,exports){
'use strict';
var isFinite = require('is-finite');

module.exports = function (str, n) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected `input` to be a string');
	}

	if (n < 0 || !isFinite(n)) {
		throw new TypeError('Expected `count` to be a positive finite number');
	}

	var ret = '';

	do {
		if (n & 1) {
			ret += str;
		}

		str += str;
	} while ((n >>= 1));

	return ret;
};

},{"is-finite":26}],35:[function(require,module,exports){
module.exports = require('./lib/stacktrace-parser.js');

},{"./lib/stacktrace-parser.js":36}],36:[function(require,module,exports){


var UNKNOWN_FUNCTION = '<unknown>';

var StackTraceParser = {
  /**
   * This parses the different stack traces and puts them into one format
   * This borrows heavily from TraceKit (https://github.com/occ/TraceKit)
   */
  parse: function(stackString) {
    var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
        gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
        node  = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
        lines = stackString.split('\n'),
        stack = [],
        parts,
        element;

    for (var i = 0, j = lines.length; i < j; ++i) {
        if ((parts = gecko.exec(lines[i]))) {
            element = {
                'file': parts[3],
                'methodName': parts[1] || UNKNOWN_FUNCTION,
                'lineNumber': +parts[4],
                'column': parts[5] ? +parts[5] : null
            };
        } else if ((parts = chrome.exec(lines[i]))) {
            element = {
                'file': parts[2],
                'methodName': parts[1] || UNKNOWN_FUNCTION,
                'lineNumber': +parts[3],
                'column': parts[4] ? +parts[4] : null
            };
        } else if ((parts = node.exec(lines[i]))) {
            element = {
                'file': parts[2],
                'methodName': parts[1] || UNKNOWN_FUNCTION,
                'lineNumber': +parts[3],
                'column': parts[4] ? +parts[4] : null
            };
        } else {
            continue;
        }

        stack.push(element);
    }

    return stack;
  }
};


module.exports = StackTraceParser;

},{}],37:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],38:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],39:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":38,"_process":30,"inherits":37}],40:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var P, YangStatement, argument, blockComment, comment, dqChar, dqLit, dqString, escape, identifier, keyword, lineComment, optSep, parse, qArg, regex, semiOrBlock, sep, sqLit, statement, stmtBlock, uArg;

  P = require('comparse');

  YangStatement = (function() {
    function YangStatement(prf1, kw1, arg1, substmts) {
      this.prf = prf1;
      this.kw = kw1;
      this.arg = arg1;
      this.substmts = substmts;
    }

    return YangStatement;

  })();

  lineComment = (P.string('//')).bind(function() {
    return P.anyChar.manyTill(P.char('\n')).bind(function(cs) {
      return P.unit(cs.join(''));
    });
  });

  blockComment = (P.string('/*')).bind(function() {
    return P.anyChar.manyTill(P.string('*/')).bind(function(cs) {
      return P.unit(cs.join(''));
    });
  });

  comment = lineComment.orElse(blockComment);

  sep = (P.space.orElse(comment)).skipMany(1);

  optSep = (P.space.orElse(comment)).skipMany();

  identifier = (P.letter.orElse(P.char('_'))).bind(function(fst) {
    return (P.alphanum.orElse(P.oneOf('.-'))).many().bind(function(tail) {
      var res;
      res = fst + tail.join('');
      return P.unit(res.slice(0, 3).toLowerCase() === 'xml' ? null : res);
    });
  });

  keyword = (identifier.bind(function(prf) {
    return P.char(':').bind(function() {
      return P.unit(prf);
    });
  })).option().bind(function(pon) {
    return identifier.bind(function(kw) {
      return P.unit([pon, kw]);
    });
  });

  uArg = (P.noneOf(" '\"\n\t\r;{}/").orElse(P.char('/').notFollowedBy(P.oneOf('/*')))).concat(1);

  sqLit = P.sat(function(c) {
    return c !== "'";
  }).concat().between(P.char("'"), P.char("'"));

  escape = P.char('\\').bind(function() {
    var esc;
    esc = {
      't': '\t',
      'n': '\n',
      '"': '"',
      '\\': '\\'
    };
    return P.oneOf('tn"\\').bind(function(c) {
      return P.unit(esc[c]);
    }).orElse(regex);
  });

  regex = P.anyChar.bind(function(c) {
    return P.unit("\\" + c);
  });

  dqChar = P.noneOf('"\\').orElse(escape);

  dqLit = P.char('"').bind(function() {
    return P.coordinates.bind(function(col) {
      return dqString(col[1]);
    });
  });

  dqString = function(lim) {
    var trimLead;
    trimLead = function(str) {
      var c, i, left, sptab;
      left = lim;
      sptab = '        ';
      i = 0;
      while (left > 0) {
        c = str[i++];
        if (c === ' ') {
          left -= 1;
        } else if (c === '\t') {
          if (left < 8) {
            return sptab.slice(0, 8 - left) + str.slice(i);
          }
          left -= 8;
        } else {
          return str.slice(i - 1);
        }
      }
      return str.slice(i);
    };
    return dqChar.manyTill(P.char('"')).bind(function(cs) {
      var j, k, len, len1, lines, ln, mo, ref, ref1, res, tlines;
      lines = cs.join('').split('\n');
      tlines = [lines[0]];
      ref = lines.slice(1);
      for (j = 0, len = ref.length; j < len; j++) {
        ln = ref[j];
        tlines.push(trimLead(ln));
      }
      res = [];
      ref1 = tlines.slice(0, -1);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        ln = ref1[k];
        mo = ln.match(/(.*\S)?\s*/);
        res.push(mo[1]);
      }
      res.push(tlines.pop());
      return P.unit(res.join('\n'));
    });
  };

  qArg = dqLit.orElse(sqLit).bind(function(lft) {
    return (P.char('+').between(optSep, optSep).bind(function() {
      return qArg;
    })).option().bind(function(rt) {
      return P.unit(lft + rt);
    });
  });

  argument = uArg.orElse(qArg);

  statement = keyword.bind(function(kw) {
    return (sep.bind(function() {
      return argument;
    })).option().bind(function(arg) {
      return optSep.bind(function() {
        return semiOrBlock.bind(function(sst) {
          return P.unit(new YangStatement(kw[0], kw[1], arg, sst));
        });
      });
    });
  });

  stmtBlock = P.char('{').bind(function() {
    return (optSep.bind(function() {
      return statement;
    })).manyTill(optSep.bind(function() {
      return P.char('}');
    }));
  });

  semiOrBlock = (P.char(';').bind(function() {
    return P.unit([]);
  })).orElse(stmtBlock);

  parse = function(text, top) {
    var yst;
    if (top == null) {
      top = null;
    }
    yst = statement.between(optSep, optSep).parse(text);
    if ((top != null) && yst.kw !== top) {
      throw P.error("Wrong top-level statement", 0);
    }
    return yst;
  };

  module.exports = {
    parse: parse
  };

}).call(this);

},{"comparse":20}],"promise/polyfill.js":[function(require,module,exports){
// not "use strict" so we can declare global "Promise"

var asap = require('asap');

if (typeof Promise === 'undefined') {
  Promise = require('./lib/core.js')
  require('./lib/es6-extensions.js')
}

require('./polyfill-done.js');

},{"./lib/core.js":31,"./lib/es6-extensions.js":32,"./polyfill-done.js":33,"asap":14}]},{},[6]);
