// Generated by CoffeeScript 1.12.2
(function() {
  var Emitter, Model, Property, Stack, XPath, debug, delegate,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:model');
  }

  delegate = require('delegates');

  Stack = require('stacktrace-parser');

  Emitter = require('events').EventEmitter;

  Property = require('./property');

  XPath = require('./xpath');

  Model = (function(superClass) {
    var enqueue;

    extend(Model, superClass);

    Model.Store = {};

    Model.Property = Property;

    function Model() {
      if (!(this instanceof Model)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Model, arguments, function(){});
      }
      Model.__super__.constructor.apply(this, arguments);
      this.state.transactable = false;
      this.state.maxTransactions = 100;
      this.state.queue = [];
      this.state.engine = new Emitter;
      this.state.engine.__ = this;
      this.schema.on('change', (function(_this) {
        return function(elem) {
          var props;
          if (typeof debug === "function") {
            debug("[" + _this.name + ":adaptive] detected schema change at " + elem.datapath);
          }
          try {
            props = _this.find(elem.datapath);
          } catch (error) {
            props = [];
          }
          return props.forEach(function(prop) {
            return prop.set(prop.content, {
              force: true
            });
          });
        };
      })(this));
      this.join(Model.Store, {
        replace: true
      });
      if (typeof debug === "function") {
        debug("created a new YANG Model: " + this.name);
      }
    }

    delegate(Model.prototype, 'state').access('engine').getter('queue');

    enqueue = function(prop) {
      if (this.queue.length > this.maxTransactions) {
        throw this.error("exceeded max transaction queue of " + this.maxTransactions + ", forgot to save()?");
      }
      return this.queue.push({
        target: prop,
        value: prop.state.prev
      });
    };

    Model.property('transactable', {
      enumerable: true,
      get: function() {
        return this.state.transactable;
      },
      set: function(toggle) {
        if (toggle === this.state.transactable) {
          return;
        }
        if (toggle === true) {
          this.state.on('update', enqueue);
        } else {
          this.state.removeListener('update', enqueue);
          this.state.queue.splice(0, this.state.queue.length);
        }
        return this.state.transactable = toggle;
      }
    });

    Model.prototype.access = function(model) {
      var e;
      try {
        return Model.Store[model].__;
      } catch (error) {
        e = error;
        throw this.error("unable to locate '" + model + "' instance in the Store");
      }
    };

    Model.prototype.enable = function(feature, controller) {
      if (controller != null) {
        this.engine[feature] = controller;
      }
      if (!this.engine.hasOwnProperty(feature)) {
        throw this.error("unable to enable unknown feature '" + feature + "'");
      }
      this.engine.emit("enable:" + feature, this.engine[feature]);
      return this;
    };

    Model.prototype.save = function() {
      if (typeof debug === "function") {
        debug("[save] trigger commit and clear queue");
      }
      this.emit('commit', this.state.queue.slice());
      this.state.queue.splice(0, this.state.queue.length);
      return this;
    };

    Model.prototype.rollback = function() {
      var change;
      while (change = this.state.queue.pop()) {
        change.target.set(change.value, {
          suppress: true
        });
      }
      return this;
    };

    Model.prototype.on = function() {
      var $$$, callback, ctx, event, filters, j, recursive;
      event = arguments[0], filters = 3 <= arguments.length ? slice.call(arguments, 1, j = arguments.length - 1) : (j = 1, []), callback = arguments[j++];
      if (!(callback instanceof Function)) {
        throw new Error("must supply callback function to listen for events");
      }
      recursive = function(name) {
        var callee, column, file, frame, frames, i, l, len, lineNumber, ref, seen;
        seen = {};
        frames = Stack.parse(new Error().stack);
        for (i = l = 0, len = frames.length; l < len; i = ++l) {
          frame = frames[i];
          if (!(~frame.methodName.indexOf(name))) {
            continue;
          }
          ref = frames[i - 1], file = ref.file, lineNumber = ref.lineNumber, column = ref.column;
          callee = file + ":" + lineNumber + ":" + column;
          if (seen[callee] == null) {
            seen[callee] = 0;
          }
          if (++seen[callee] > 1) {
            console.warn("detected recursion for '" + callee + "'");
            return true;
          }
        }
        return false;
      };
      ctx = this.context;
      $$$ = function() {
        var args, prop, ref;
        prop = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (typeof debug === "function") {
          debug("$$$: check if '" + prop.path + "' in '" + filters + "'");
        }
        if (!filters.length || (ref = prop.path).contains.apply(ref, filters)) {
          if (!recursive('$$$')) {
            return callback.apply(ctx, [prop].concat(args));
          }
        }
      };
      return this.state.on(event, $$$);
    };

    Model.prototype.toJSON = function() {
      return Model.__super__.toJSON.call(this, false);
    };

    Model.prototype.set = function(value, opts) {
      var copy, k, v;
      if (value == null) {
        value = {};
      }
      copy = {};
      for (k in value) {
        if (!hasProp.call(value, k)) continue;
        v = value[k];
        copy[k] = v;
      }
      return Model.__super__.set.call(this, copy, opts);
    };

    Model.prototype.find = function(pattern, opts) {
      var e, match, target, xpath;
      if (pattern == null) {
        pattern = '.';
      }
      if (opts == null) {
        opts = {};
      }
      if (this.container == null) {
        return Model.__super__.find.apply(this, arguments);
      }
      if (typeof debug === "function") {
        debug("[" + this.name + ":find] match " + pattern + " (root: " + opts.root + ")");
      }
      try {
        match = Model.__super__.find.call(this, pattern, {
          root: true
        });
      } catch (error) {
        e = error;
        match = [];
      }
      if (match.length || opts.root) {
        return match;
      }
      xpath = (function() {
        switch (false) {
          case !(pattern instanceof XPath):
            return pattern;
          default:
            return XPath.parse(pattern, this.schema);
        }
      }).call(this);
      target = xpath.xpath.tag.split(':')[0];
      if (target === this.name) {
        return [];
      }
      if (typeof debug === "function") {
        debug("[" + this.name + ":find] locate " + target + " and apply " + xpath);
      }
      opts.root = true;
      try {
        return this.access(target).find(xpath, opts);
      } catch (error) {}
      try {
        return this.schema.lookup('module', target)["eval"](this.content).find(xpath, opts);
      } catch (error) {}
      return [];
    };

    Model.prototype["do"] = function() {
      var args, path, target;
      path = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      target = this["in"](path);
      if (target == null) {
        throw this.error("cannot invoke on '" + path + "', not found");
      }
      return target["do"].apply(target, args);
    };

    return Model;

  })(Property);

  module.exports = Model;

}).call(this);
