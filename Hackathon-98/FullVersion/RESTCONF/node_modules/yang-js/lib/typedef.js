// Generated by CoffeeScript 1.12.2
(function() {
  var Expression, Typedef,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Expression = require('./expression');

  Typedef = (function(superClass) {
    extend(Typedef, superClass);

    function Typedef() {
      Typedef.__super__.constructor.apply(this, ['typedef'].concat(slice.call(arguments)));
    }

    Typedef.property('convert', {
      get: function() {
        var ref;
        return (ref = this.construct) != null ? ref : function(x) {
          return x;
        };
      }
    });

    return Typedef;

  })(Expression);

  module.exports = Typedef;

}).call(this);
