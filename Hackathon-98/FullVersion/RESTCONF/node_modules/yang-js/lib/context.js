// Generated by CoffeeScript 1.12.2
(function() {
  var debug, delegate, proto,
    hasProp = {}.hasOwnProperty;

  if (process.env.DEBUG != null) {
    debug = require('debug')('yang:context');
  }

  delegate = require('delegates');

  proto = module.exports = {
    inspect: function() {
      return this.toJSON();
    },
    toJSON: function() {
      var ref;
      return (ref = this.property) != null ? ref.valueOf() : void 0;
    },
    "throw": function(err) {
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      err.context = this;
      throw err;
    },
    "with": function(state) {
      var k, v;
      if (state == null) {
        state = {};
      }
      for (k in state) {
        if (!hasProp.call(state, k)) continue;
        v = state[k];
        this.state[k] = v;
      }
      return this;
    },
    defer: function(data) {
      if (typeof debug === "function") {
        debug("deferring '" + this.path + "' until update");
      }
      if (typeof debug === "function") {
        debug(data);
      }
      this.root.once('update', (function(_this) {
        return function() {
          if (typeof debug === "function") {
            debug("applying deferred data (" + (typeof data) + ") into " + _this.path);
          }
          if (typeof debug === "function") {
            debug(data);
          }
          return _this.content = data;
        };
      })(this));
      return data;
    },
    debug: function() {
      return typeof debug === "function" ? debug.apply(null, arguments) : void 0;
    }
  };

  delegate(proto, 'property').method('get').method('find').method('in').method('once').method('on').access('content').getter('schema').getter('container').getter('parent').getter('name').getter('kind').getter('path').getter('root');

  delegate(proto, 'state').access('input').access('output');

  delegate(proto, 'root').method('access').method('enable').method('disable').access('engine');

}).call(this);
